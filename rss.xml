<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tin_nqn</title><link>https://mgaitan.github.io/</link><description>&gt;&gt;&gt; me.geek.post()</description><atom:link href="https://mgaitan.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents © 2025 &lt;a href="mailto:gaitan@gmail.com"&gt;Martín Gaitán&lt;/a&gt; </copyright><lastBuildDate>Fri, 31 Oct 2025 21:08:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Easter-eggs en tu código con texto invisible</title><link>https://mgaitan.github.io/posts/easter-eggs-con-texto-invisible/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;div&gt;&lt;p&gt;Según Wikipedia en español, &lt;a href="https://es.wikipedia.org/wiki/Huevo_de_Pascua_(virtual)"&gt;un "easter egg" es &lt;/a&gt; ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;un mensaje o capacidad oculta contenido en películas, series de televisión, ..., programas informáticos o videojuegos. Entre los programadores, parece haber una motivación en dejar una marca personal, casi un toque artístico sobre un producto intelectual, el cual es por naturaleza estándar y funcional. Actualmente, los huevos de Pascua tratan de entretener, buscar nuevos trabajos potenciales, pagar tributo a los ejecutivos o divertir a los programadores.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No sé a quien le hizo creer eso de que un software es "estándar y funcional" al crédulo wikipedista,
pero es verdad que la pulsión por poner huevos de pascua en el software es casi tan vieja como el software mismo.&lt;/p&gt;
&lt;p&gt;Acá les traigo una técnica que yo descubrí hace varias décadas, en el jardín de infantes cuando dibujabamos con jugo de limón en una hoja en blanco para que más tarde, mágicamente, se revelara el garabato al calor del encendedor de la seño que seguramente había estado fumando en el rincón de las maderitas un rato antes.&lt;/p&gt;
&lt;p&gt;Veamos entonces como escribir mensajes en texto (digital) invisible: jugo de limón en su versión unicode.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mgaitan.github.io/posts/easter-eggs-con-texto-invisible/"&gt;Leer más…&lt;/a&gt; (restan 2 minutos)&lt;/p&gt;&lt;/div&gt;</description><category>easter-egg</category><category>gist</category><category>humor</category><guid>https://mgaitan.github.io/posts/easter-eggs-con-texto-invisible/</guid><pubDate>Fri, 31 Oct 2025 20:18:17 GMT</pubDate></item><item><title>Ignorando cambios en git localmente</title><link>https://mgaitan.github.io/posts/ignorando-cambios-en-git-localmente/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;div&gt;&lt;p&gt;Es bien conocido que en un repositorio de git podemos usar un archivo &lt;a href="https://git-scm.com/docs/gitignore"&gt;&lt;code&gt;.gitignore&lt;/code&gt;&lt;/a&gt; para omitir el seguimiento de archivos que no queremos que se suban (se "empujen") al repositorio remoto. Si un archivo coincide con el patrón de un &lt;code&gt;.gitignore&lt;/code&gt;, entonces no se mostrará en un &lt;code&gt;git status&lt;/code&gt; para añadir sus eventuales cambios a un commit.&lt;/p&gt;
&lt;p&gt;Típicamente se usan para ignorar directorios donde se instalan dependencias (e.g. el virtualenv para proyectos Python generalmente instalado en &lt;code&gt;.venv&lt;/code&gt;), archivos temporales generados por el intérprete o compilador, archivos específicos para IDEs, etc.&lt;/p&gt;
&lt;p&gt;Son tan comunes que GitHub ofrece &lt;a href="https://github.com/github/gitignore"&gt;plantillas de gitignore&lt;/a&gt; curadas para distintos lenguajes de programación, y herramientas específicas para inicializar proyectos como &lt;a href="https://docs.astral.sh/uv/concepts/projects/init/"&gt;uv init&lt;/a&gt; generan un &lt;code&gt;.gitignore&lt;/code&gt; básico como parte del &lt;em&gt;boilerplate&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Un &lt;code&gt;.gitignore&lt;/code&gt; forma parte del proyecto (está commiteado) y es importante que esté en el repositorio para que todos los colaboradores tengan la misma configuración.&lt;/p&gt;
&lt;p&gt;¿Pero qué pasa si queremos ignorar archivos solo localmente?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mgaitan.github.io/posts/ignorando-cambios-en-git-localmente/"&gt;Leer más…&lt;/a&gt; (restan 1 minutos)&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>gitignore</category><category>til</category><guid>https://mgaitan.github.io/posts/ignorando-cambios-en-git-localmente/</guid><pubDate>Fri, 31 Oct 2025 17:19:23 GMT</pubDate></item><item><title>Un cheatsheet automático para tu CLI Typer</title><link>https://mgaitan.github.io/posts/un-cheatsheet-automatico-para-tu-cli-typer/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://typer.tiangolo.com/"&gt;Typer&lt;/a&gt; es gran framework de CLIs del mismo autor que creó &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;. Permite crear interfaces de línea de comandos robustas e intuitivas basándose en anotaciones sobre los argumentos de funciones. Sin hacer mucho esfuerzo te ofrece autocompletado y ayuda en línea de comandos, que de paso se ve muy bonita al estar basada en &lt;a href="https://rich.readthedocs.io/"&gt;rich&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;También permite facilmente registrar grupos de comandos y subcomandos, lo que facilita la organización y mantenimiento de aplicaciones grandes. Pero, ¿qué pasa cuando tu aplicación crece, con múltiples subcomandos, grupos y opciones anidadas?&lt;/p&gt;
&lt;p&gt;Para los usuarios (¡o incluso para vos mismo después de un tiempo!), puede ser un desafío recordar todos los comandos disponibles, sus funciones y cómo interactúan. La ayuda integrada y la documentación son clave, pero &lt;strong&gt;¿no sería fantástico tener un "mapa" en vivo de tu aplicación, accesible directamente desde la terminal?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;¡Acá es donde entra &lt;a href="https://github.com/mgaitan/typer-cheatsheet-command"&gt;typer-cheatsheet-command&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mgaitan.github.io/posts/un-cheatsheet-automatico-para-tu-cli-typer/"&gt;Leer más…&lt;/a&gt; (restan 1 minutos)&lt;/p&gt;&lt;/div&gt;</description><category>cli</category><guid>https://mgaitan.github.io/posts/un-cheatsheet-automatico-para-tu-cli-typer/</guid><pubDate>Thu, 30 Oct 2025 22:18:39 GMT</pubDate></item><item><title>Depedencias automáticas en scripts Python con autopep723</title><link>https://mgaitan.github.io/posts/dependencias-automaticas-scripts-python-autopep723/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;div&gt;&lt;p&gt;¿Alguna vez has deseado poder ejecutar un script de Python sin preocuparte por instalar sus dependencias primero?&lt;/p&gt;
&lt;p&gt;Todos hemos estado ahí. Necesitas hackear un pequeño fragmento de código, tu LLM amigo te da un script de Python útil o encontraste uno en Stack Overflow (Dios te tenga en la gloria) o Gist. Pero si lo intentas ejecutar directamente:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;ModuleNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;named&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;'your_experiment_dependency'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Entonces comienza la burocracia de verificar qué paquetes necesitas, con el agravante de que muchas veces el nombre con el que se instala no corresponde con el nombre que se importa), lidiar con conflictos de versiones y sobrecargar tu entorno.&lt;/p&gt;
&lt;p&gt;Si todo el mundo coincide en que Python es un lenguaje pragmático y elegante que resulta ideal para scripts, ¿por qué esta parte tiene que ser complicada?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mgaitan.github.io/posts/dependencias-automaticas-scripts-python-autopep723/"&gt;Leer más…&lt;/a&gt; (restan 3 minutos)&lt;/p&gt;&lt;/div&gt;</description><category>automation</category><category>dependencies</category><category>pep723</category><category>python</category><category>uv</category><guid>https://mgaitan.github.io/posts/dependencias-automaticas-scripts-python-autopep723/</guid><pubDate>Fri, 25 Jul 2025 11:00:00 GMT</pubDate></item><item><title>SVG animados para tus demos de programas CLI</title><link>https://mgaitan.github.io/posts/svg-animados-para-tus-demos-de-programas-cli/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;p&gt;¿Querés mostrar lo piola que es tu programa de línea de comandos con una demo de un uso real? ¿Querés evitar que la demo quede desactualizada facilmente? ¿Querés incluir la demo en sitios que no permiten videos ni javascript como los &lt;code&gt;README&lt;/code&gt; de Github o Pypi? &lt;/p&gt;
&lt;p&gt;¡Los SVG animados generados programáticamente son la solución! Se incrustan como una imágen normal pero son más livianos que los GIFs, se reproducen automáticamente en la misma página, no requieren javascript y mantienen el texto nítido sin importar el zoom. &lt;/p&gt;
&lt;p&gt;Además, automatizar tus demos te permite tener control total y regenerar el resultado visual de manera programática cuando la CLI cambie o quieras hacer cambios. &lt;/p&gt;
&lt;p&gt;Como ejemplo, acá la demo un programita que hice hace poco llamado &lt;a href="https://github.com/mgaitan/cuitonline"&gt;cuitonline&lt;/a&gt; que luce así para su versión 0.1: &lt;/p&gt;
&lt;p align="center"&gt;
&lt;img width="90%" src="https://raw.githubusercontent.com/mgaitan/cuitonline/refs/tags/0.1/demo/usage.svg"&gt;
&lt;/p&gt;

&lt;h3&gt;¿Cómo lo hacemos?&lt;/h3&gt;
&lt;p&gt;Vamos a utilizar las siguientes herramientas, todas open source. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/veracioux/tuterm"&gt;tuterm&lt;/a&gt;&lt;/strong&gt;: Es una herramienta bash para crear demos de programas CLI. Se define un "script" (en el mejor sentido de la palabra) que permite controlar los comandos que se ejecutan (¡de verdad!) en la consola, que comentario mostrar y qué otros comandos auxiliares ejecutar. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;uvx&lt;/strong&gt;: Es el equivalente a &lt;code&gt;pipx&lt;/code&gt; de &lt;a href="https://github.com/astral-sh/uv"&gt;uv&lt;/a&gt;. Lo usamos para ejecutar &lt;code&gt;asciinema&lt;/code&gt; gestionando las dependencias e instalandolo en un entorno virtual automáticamente. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://docs.asciinema.org/manual/cli/"&gt;asciinema&lt;/a&gt;&lt;/strong&gt;: Graba sesiones de terminal y las guarda en un formato de texto. Por defecto estos archivos se suben y se comparten a traves de &lt;a href="https://asciinema.org/"&gt;asciinema.org&lt;/a&gt;, que es genial pero el reproductor requiere javascript lo que limita su uso. Por eso lo convertimos a SVG.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/marionebl/svg-term-cli"&gt;svg-term-cli&lt;/a&gt;&lt;/strong&gt;: Convierte grabaciones de asciinema en SVGs animados. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Paso a paso&lt;/h3&gt;
&lt;h4&gt;1. Escribe el script&lt;/h4&gt;
&lt;p&gt;Siguiendo el ejemplo de &lt;code&gt;cuitonline&lt;/code&gt; mostrado arriba. El script de &lt;code&gt;tuterm&lt;/code&gt; lo llameé &lt;code&gt;usage.tutorial&lt;/code&gt; con el siguiente contenido:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;# file: &amp;gt; cuitonline_usage&lt;/span&gt;
prompt&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-ne&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"\033[1;35m\$ \033[0;33m"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
configure&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DELAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.02
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DELAY_PROMPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.2
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;COLOR_MESSAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'1;32'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

run&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;M&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Buscar por CUIT"&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;c&lt;span class="w"&gt; &lt;/span&gt;cuitonline&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;-22293909-8
&lt;span class="w"&gt; &lt;/span&gt;sleep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;M&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Buscar por DNI"&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;c&lt;span class="w"&gt; &lt;/span&gt;cuitonline&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10433615&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;sleep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;M&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Busca por nombre"&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;c&lt;span class="w"&gt; &lt;/span&gt;cuitonline&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"messi lionel andres"&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;sleep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;clear
&lt;span class="w"&gt; &lt;/span&gt;M&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Obtiene la página 2 de los resultados"&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;c&lt;span class="w"&gt; &lt;/span&gt;cuitonline&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"juan jose gonzalez"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-p2
&lt;span class="w"&gt; &lt;/span&gt;sleep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Las líneas que empiezan por &lt;code&gt;M&lt;/code&gt; son los comentarios. &lt;code&gt;c&lt;/code&gt; son comandos que se van a ver, y el resto son comandos que se van a ejecutar pero no se muestran tipeados. &lt;/p&gt;
&lt;h4&gt;2. Graba la sesión de la terminal&lt;/h4&gt;
&lt;p&gt;Utiliza asciinema para grabar la sesión mientras tuterm ejecuta tu demo:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;uvx&lt;span class="w"&gt; &lt;/span&gt;asciinema&lt;span class="w"&gt; &lt;/span&gt;rec&lt;span class="w"&gt; &lt;/span&gt;--overwrite&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'tuterm usage.tutorial --mode demo'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;usage.cast
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;3. Convierte la grabación en un SVG animado&lt;/h4&gt;
&lt;p&gt;Con svg-term-cli definimos el aspecto de la "consola" y convertimos la grabación en un SVG animado:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;svg-term&lt;span class="w"&gt; &lt;/span&gt;--window&lt;span class="w"&gt; &lt;/span&gt;--width&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;75&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--height&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--padding&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--in&lt;span class="w"&gt; &lt;/span&gt;usage.cast&lt;span class="w"&gt; &lt;/span&gt;--out&lt;span class="w"&gt; &lt;/span&gt;usage.svg
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;4. Añade el SVG generado en tu archivo &lt;code&gt;README.md&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Por ejemplo si lo subis a &lt;code&gt;/demo/usage.svg&lt;/code&gt; de tu repo, &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&amp;lt;p align="center"&amp;gt;
&amp;lt;img width="90%" src="https://raw.githubusercontent.com/&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;/refs/heads/main/demo/usage.svg" /&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;¡Y listo! Ahora tenés una demo animada, nítida y mantenible programáticamente para tu programa CLI directamente en tu README de GitHub. 😎&lt;/p&gt;</description><guid>https://mgaitan.github.io/posts/svg-animados-para-tus-demos-de-programas-cli/</guid><pubDate>Thu, 23 Jan 2025 19:02:18 GMT</pubDate></item><item><title>Screen layout switcher para Linux</title><link>https://mgaitan.github.io/posts/custom-screen-layout-switcher-for-linux/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;p&gt;Mi setup de trabajo consiste en la laptop (Lenovo x1 del 2015), un monitor externo de 22" y un combo teclado + mouse inalambrico &lt;a href="https://www.cotodigital3.com.ar/sitios/cdigi/producto/-teclado-top-house-wireless-combo-mouse-kb592gcm/_/A-00484043-00484043-200"&gt;del supermercado&lt;/a&gt;. Actualmente estoy usando &lt;a href="https://pop.system76.com/"&gt;Pop!_OS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;El monitor está en un &lt;a href="https://www.oneboxsolutions.com.ar/producto/ob-lcd12/"&gt;brazo&lt;/a&gt; que me permite acomodarlo y girarlo en cualquier posición. El brazo está en una pequeña alzada que me permite ganar unos 13cm de altura, de manera que puedo usarlo para hacer standup desk junto con mi mesita. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="es" dir="ltr"&gt;Hoy terminé mí mesita para trabajar parado. Con el brazo para monitor suplementado la altura queda bastante razonable y también puedo usarla con el tele vía chromecast &lt;a href="https://t.co/O6RLKogCO7"&gt;pic.twitter.com/O6RLKogCO7&lt;/a&gt;&lt;/p&gt;— Martín Gaitán (@tin_nqn_) &lt;a href="https://twitter.com/tin_nqn_/status/1304951373482647553?ref_src=twsrc%5Etfw"&gt;September 13, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Trato de trabajar al menos la mitad del día parado y a veces me voy con la compu a otra parte de la casa. Así que todo el tiempo estoy cambiando la configuración de la/s pantalla/s. Hacer esta tarea a mano me llevaba mucho tiempo y además es dificilisima la motricidad con el mouse si la pantalla está girada.  &lt;/p&gt;
&lt;p&gt;Dentro del soporte de "funciones avanzadas de teclado" de los linux modernos está "switch-monitor". Gnome mapea esta funcion con &lt;code&gt;&amp;lt;Super&amp;gt;+P&lt;/code&gt; además de la tecla especial del teclado. &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;gsettings&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;org.gnome.mutter.keybindings&lt;span class="w"&gt; &lt;/span&gt;switch-monitor
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;Super&amp;gt;p'&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'XF86Display'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;El problema con esta funcionalidad es que los modos están predefinidos: monitores espejados, sólo externa, sólo integrada o ambas "unidas" pero asumiendo ambas horizontales y el monitor izquierdo a la derecha (y el mio queda a la izquierda de la laptop). &lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/tin_nqn_/status/1380947297777901570"&gt;Pregunté en twitter&lt;/a&gt; y varios amigos me apuntaron a la herramienta 
&lt;a href="https://christian.amsuess.com/tools/arandr/"&gt;arandr&lt;/a&gt; que permite hacer las mismas configuraciones de pantallas que la herramienta de Gnome (de manera manual y visual) con la diferencia de que los modos definidos se pueden guardar como un comando de xrandr. Por ejemplo este setup de ambas pantallas encendidas y horizontales &lt;/p&gt;
&lt;p&gt;&lt;img alt="arandr example" src="https://user-images.githubusercontent.com/2355719/114436452-b7c04780-9b9b-11eb-9b0f-1c7bc1c2da04.png"&gt;&lt;/p&gt;
&lt;p&gt;se guarda desde arandr (¡y se puede abrir para editar!) como un script &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tin&lt;/span&gt;&lt;span class="nv"&gt;@pop&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;os&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screenlayout&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#!&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="n"&gt;xrandr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--output eDP-1 --mode 1920x1080 --pos 1920x283 --rotate normal --output DP-1 --off --output HDMI-1 --off --output DP-2 --off --output HDMI-2 --primary --mode 1920x1080 --pos 0x0 --rotate normal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Asi es que definí con esa herramienta los modos frecuentes que uso&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;~/.screenlayout$ ls *.sh
2horizontal.sh  ext-horizontal.sh  ext-vertical.sh  lapt-solo.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lo que quería luego era un atajo de teclado que me permitiera rotar entre esos modos. Hice un script en python que lo dejé en la misma carpeta&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pathlib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;
&lt;span class="n"&gt;layouts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*.sh'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;  &lt;span class="c1"&gt;# roundrobin over the layouts. &lt;/span&gt;


&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# if there is a last used, move to the next one&lt;/span&gt;
    &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s1"&gt;'.last'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"last found"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;layouts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropwhile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;layouts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layouts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt; 


&lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layouts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"switching to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# write the last&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s1"&gt;'.last'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Este &lt;code&gt;switcher.py&lt;/code&gt; busca todos los archivos &lt;code&gt;.sh&lt;/code&gt; en la misma carpeta y ejecuta el que sigue al ultimo ejecutado, que se guarda en un archivo &lt;code&gt;.last&lt;/code&gt; (si no existe, el primer modo será el primero listado). &lt;/p&gt;
&lt;p&gt;Decidí deshabilitar el atajo por default &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;gsettings&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;org.gnome.mutter.keybindings&lt;span class="w"&gt; &lt;/span&gt;switch-monitor&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"['XF86Display']&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;y agregué un shortcut que ejecuta &lt;code&gt;~/.screenlayout/switcher&lt;/code&gt; con &lt;code&gt;Ctrl + Super + P&lt;/code&gt; (en gnome: Configuración -&amp;gt; Keyboard -&amp;gt; Combinación de teclas -&amp;gt; Customize Shortcuts -&amp;gt; Combinación Personalizada )&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://user-images.githubusercontent.com/2355719/114437517-0a4e3380-9b9d-11eb-8847-1d6ebdd61f16.png"&gt;&lt;/p&gt;
&lt;p&gt;Ahora puedo pararme cuando quiera, levantar y girar el monitor y apretar 
&lt;code&gt;Ctrl + Super + P&lt;/code&gt; las veces necesarias hasta que quede como quiero. &lt;/p&gt;</description><guid>https://mgaitan.github.io/posts/custom-screen-layout-switcher-for-linux/</guid><pubDate>Mon, 12 Apr 2021 16:52:34 GMT</pubDate></item><item><title>move-imports, o cómo calmar el TOC de un pythonista</title><link>https://mgaitan.github.io/posts/move-imports-o-como-calmar-el-toc-de-un-pythonista/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;div&gt;&lt;p&gt;Una historia de éxito: un grupito pequeño de programadores (o quizas sólo uno)
a pura pasión, café y feedback de sus usuarios mete miles de lineas de código
que logran hacer funcionar un negocio.&lt;/p&gt;
&lt;p&gt;Parte del éxito, supongamos, es porque el sistema está hecho en Python, que se eligió porque es versátil y pragmático para obtener resultados rápidos.
Pero se sabe: en el vértigo la pasión, el feedback y el café no cabían muchas elegancias ni había tiempo para estilos o convenciones. &lt;em&gt;Caminante no hay camino, se hace camino al andar&lt;/em&gt;, dijo Machado, refiriéndose a la deuda técnica que toman las startups en sus inicios.&lt;/p&gt;
&lt;p&gt;El negocio comienza a crecer, hay más demandas de los clientes y la cosa está tan fea que algo, alguito, hay que mejorar. Como, por suerte, la cosa va bien, se contratan nuevos programadores que tengan experiencia en Python específicamente. Y estos nuevos programadores experimentados, los &lt;em&gt;pythonistas&lt;/em&gt;, vienen con
sus mañosas convenciones del lenguaje a cuestas. Una de ellas está &lt;a href="https://pep8.org#imports"&gt;tallada en piedra&lt;/a&gt;: salvo ineludibles excepciones, &lt;strong&gt;los &lt;em&gt;imports&lt;/em&gt; van en la cabecera del módulo y en un orden en particular&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Hay justificación, dicen los pythonistas. Simplificar la lectura, saber a simple vista de qué depende un módulo, tener bloques de código más chicos, no repetirse. Pero, aceptémoslo, es un &lt;a href="https://es.wikipedia.org/wiki/Trastorno_obsesivo-compulsivo"&gt;TOC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mgaitan.github.io/posts/move-imports-o-como-calmar-el-toc-de-un-pythonista/"&gt;Leer más…&lt;/a&gt; (restan 4 minutos)&lt;/p&gt;&lt;/div&gt;</description><category>scripts</category><guid>https://mgaitan.github.io/posts/move-imports-o-como-calmar-el-toc-de-un-pythonista/</guid><pubDate>Tue, 12 May 2020 19:13:41 GMT</pubDate></item><item><title>El mono salta entre las ramas. El desarrollador también</title><link>https://mgaitan.github.io/posts/el-mono-salta-entre-las-ramas/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;div&gt;&lt;p&gt;Cuando laburamos con git, necesitamos frecuentemente cambiar
de rama, sea porque estamos haciendo un feature mientras esperamos
que alguien haga review de otra cosa y eventualmente pide algo,
sea porque somos nosotros los que &lt;em&gt;checkouteamos&lt;/em&gt; el branch
de un compañero para probar algo.&lt;/p&gt;
&lt;p&gt;Ir y volver entre ramas es fácil porque basta usar &lt;cite&gt;-&lt;/cite&gt; que es
un alias del branch previo.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_14894ae29b6b466092680e52e356f45e-1" name="rest_code_14894ae29b6b466092680e52e356f45e-1" href="https://mgaitan.github.io/posts/el-mono-salta-entre-las-ramas/#rest_code_14894ae29b6b466092680e52e356f45e-1"&gt;&lt;/a&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;master
&lt;a id="rest_code_14894ae29b6b466092680e52e356f45e-2" name="rest_code_14894ae29b6b466092680e52e356f45e-2" href="https://mgaitan.github.io/posts/el-mono-salta-entre-las-ramas/#rest_code_14894ae29b6b466092680e52e356f45e-2"&gt;&lt;/a&gt;Switched&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'master'&lt;/span&gt;
&lt;a id="rest_code_14894ae29b6b466092680e52e356f45e-3" name="rest_code_14894ae29b6b466092680e52e356f45e-3" href="https://mgaitan.github.io/posts/el-mono-salta-entre-las-ramas/#rest_code_14894ae29b6b466092680e52e356f45e-3"&gt;&lt;/a&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;-
&lt;a id="rest_code_14894ae29b6b466092680e52e356f45e-4" name="rest_code_14894ae29b6b466092680e52e356f45e-4" href="https://mgaitan.github.io/posts/el-mono-salta-entre-las-ramas/#rest_code_14894ae29b6b466092680e52e356f45e-4"&gt;&lt;/a&gt;Switched&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'writing'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;git checkout -&lt;/code&gt; es equivalente a la forma general &lt;code class="docutils literal"&gt;git checkout &lt;span class="pre"&gt;@{-1}&lt;/span&gt;&lt;/code&gt;
y si cambiamos el -1 por -N volveremos al enésimo branch en que estuvimos.&lt;/p&gt;
&lt;p&gt;El problema es que si no nos acordamos el nombre del branch, mucho menos
podriamos acordarnos el orden cronológico en el que lo usamos.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mgaitan.github.io/posts/el-mono-salta-entre-las-ramas/"&gt;Leer más…&lt;/a&gt; (restan 2 minutos)&lt;/p&gt;&lt;/div&gt;</description><guid>https://mgaitan.github.io/posts/el-mono-salta-entre-las-ramas/</guid><pubDate>Thu, 30 Apr 2020 04:59:00 GMT</pubDate></item><item><title>Miau: cuando el gato dice la verdad</title><link>https://mgaitan.github.io/posts/miau-cuando-el-gato-dice-la-verdad/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;div&gt;&lt;p&gt;Cuando se cumplieron los primeros 7 meses de su gestión, el presidente Macri dió &lt;a class="reference external" href="https://www.youtube.com/watch?v=Jp8_BXkTqXk"&gt;una entrevista exclusiva&lt;/a&gt; a periodistas del canal Telefé. Horas después apareció este video en las redes, cuyo autor o autora desconozco:&lt;/p&gt;
&lt;div class="video-container"&gt;
  &lt;iframe src="https://www.youtube.com/embed/C8e6Fibx0k0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;p&gt;Ahí estaba el humor, el fruto más gozoso del ingenio popular, para salvarnos a carcajadas. No para evadirnos de la realidad sino, al contrario, para vencerla, para enfrentar la amargura que algunas certezas traen (ya sabíamos a esa altura, con devaluación a precios y tarifazos en curso, que las advertencias no habían sido una "campaña del miedo"). Pero era aún más: era un ejemplo de ese humor que enuncia verdades difíciles de escuchar de otra manera.&lt;/p&gt;
&lt;p&gt;Simplemente me pareció genial. Me acordé, por supuesto, de la &lt;a class="reference external" href="https://www.youtube.com/watch?v=Lz__bWnUMFQ"&gt;entrevista a Homero&lt;/a&gt; en el capítulo de la Venus de jalea y también de un cortometraje español que ví hace mucho titulado "&lt;a class="reference external" href="https://www.youtube.com/watch?v=12Z3J1uzd0Q"&gt;Lo que tú quieras oir&lt;/a&gt;", cuyo argumento se basa exáctamente en la creación de un &lt;em&gt;mash-up&lt;/em&gt; de audio como alivio de una situación dramática.&lt;/p&gt;
&lt;p&gt;Cada discurso o entrevista de Macri me parecía (me parece) un puesta en escena cínica, plagada de mentiras, floja de fonética y con pésimo acting. Necesitaba más de estos videos que le hagan decir la verdad.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mgaitan.github.io/posts/miau-cuando-el-gato-dice-la-verdad/"&gt;Leer más…&lt;/a&gt; (restan 8 minutos)&lt;/p&gt;&lt;/div&gt;</description><guid>https://mgaitan.github.io/posts/miau-cuando-el-gato-dice-la-verdad/</guid><pubDate>Wed, 09 May 2018 19:36:18 GMT</pubDate></item><item><title>El padronazo cordobés</title><link>https://mgaitan.github.io/posts/el-padronazo-cordobes/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://opendatacordoba.org/"&gt;Open Data Córdoba&lt;/a&gt; es un colectivo abierto y multidisciplinario sin fines de lucro cuyo objetivo principal es difundir y transparentar el uso de la tecnología y los datos masivos para beneficio del conjunto de la sociedad, especialmente en la provincia de Córdoba.&lt;/p&gt;
&lt;p&gt;El grupo &lt;a href="http://opendatacordoba.org/blog/democracia-con-codigos-asi-nacio-opendatacordoba/"&gt;nació&lt;/a&gt; en época de elecciones, intentando echar un manto de luz a las sospechas fundadas de desprolijidades en el escrutinio provisorio de las legislativas de 2013. Luego de muchas otras iniciativas y bastante perseverancia docente de algunos de nuestros compañeros, nuestra contribución ha empezado a ser reconocida desde los medios locales, algunas agrupaciones políticas y otras organizaciones de la sociedad civil que abogan por la transparencia y el fortalecimiento de las instituciones.&lt;/p&gt;
&lt;p&gt;En este contexto, el portal de noticias &lt;a href="http://www.cba24n.com.ar"&gt;Cba24N&lt;/a&gt;, perteneciente al grupo de Servicios de Radio y Televisión (SRT) de la Universidad Nacional de Córdoba, nos ha invitado a realizar análisis de datos "en vivo" el próximo 25 de octubre, día de las elecciones nacionales.&lt;/p&gt;
&lt;p&gt;Hay muchas &lt;a href="https://hackdash.org/dashboards/odc2015"&gt;ideas para ese día&lt;/a&gt; que ojalá podamos llevar adelante, aunque vale resaltar (&lt;strike&gt;atajarse&lt;/strike&gt;) que se trata de una tarea totalmente voluntaria . Mientras tanto, el domingo pasado me dediqué a jugar con algunas agregaciones sobre el padrón de Córdoba para encontrar "notas de color" analizando nombres y apellidos de los votantes&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mgaitan.github.io/posts/el-padronazo-cordobes/"&gt;Leer más…&lt;/a&gt; (restan 13 minutos)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>dataviz</category><category>opendata</category><category>pandas</category><guid>https://mgaitan.github.io/posts/el-padronazo-cordobes/</guid><pubDate>Tue, 13 Oct 2015 22:04:48 GMT</pubDate></item></channel></rss>