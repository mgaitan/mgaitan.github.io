<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tin_nqn (Posts sobre Software Libre)</title><link>https://mgaitan.github.io/</link><description></description><atom:link href="https://mgaitan.github.io/categories/software-libre.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents © 2025 &lt;a href="mailto:gaitan@gmail.com"&gt;Martín Gaitán&lt;/a&gt; </copyright><lastBuildDate>Fri, 31 Oct 2025 17:59:38 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Disqus para spip</title><link>https://mgaitan.github.io/posts/disqus-para-spip/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;img alt="/images/disqus-newlod23a-8b781.gif" class="align-right" src="https://mgaitan.github.io/images/disqus-newlod23a-8b781.gif"&gt;
&lt;p&gt;Hace tiempo me interesa el servicio
&lt;a class="reference external" href="http://www.disqus.com"&gt;disqus.com&lt;/a&gt; que provee una plataforma de
comentarios muy poderosa y fácil de usar.&lt;/p&gt;
&lt;p&gt;Comencé un &lt;a class="reference external" href="http://zone.spip.org/trac/spip-zone/browser/_plugins_/disqus"&gt;pequeño
plugin&lt;/a&gt;
para integrar Disqus a &lt;a class="reference external" href="http://www.spip.net"&gt;Spip&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://mgaitan.github.io/downloads/disqus.zip"&gt;Plugin Disqus para SPIP version 0.1&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Por ahora tiene dos componentes básicos:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Un esqueleto inc-forum.html que reemplaza el esqueleto por defecto de
SPIP (y su formulario) por Disqus&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Un esqueleto para exportar comentarios existentes (genera un XML
importable a traves del panel de disqus)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;La configuración se realiza a través de una página (requiere el &lt;a class="reference external" href="http://plugins.spip.net/CFG"&gt;plugin
CFG&lt;/a&gt;) donde se define el &lt;em&gt;"Disqus
shortname"&lt;/em&gt; (la identificación unica que asignamos al sitio donde
usaremos Diqus).&lt;/p&gt;
&lt;p&gt;Para generar el XML con la exportación de comentarios preexistentes,
basta acceder a &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/?page=export_comments_to_disqus&lt;/span&gt;&lt;/code&gt; y luego importar
ese archivo desde el panel de Disqus (Tools -&amp;gt; Import/Export )&lt;/p&gt;</description><category>Software Libre</category><category>spip</category><category>Web 2.0</category><guid>https://mgaitan.github.io/posts/disqus-para-spip/</guid><pubDate>Thu, 07 Jul 2011 04:45:06 GMT</pubDate></item><item><title>Compartiendo documentación de paquetes python</title><link>https://mgaitan.github.io/posts/compartiendo-documentacion-de/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;p&gt;Sabido es, aunque muchas veces se ignora, que un software sin
documentación está incompleto
[&lt;a class="reference external" href="https://mgaitan.github.io/blog/article/compartiendo-documentacion-de#nb1"&gt;1&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;Si bien el manifiesto ágil
&lt;a class="reference external" href="http://agilemanifesto.org/iso/es/"&gt;proclama&lt;/a&gt; &lt;em&gt;"Software funcionando
sobre documentación extensiva"&lt;/em&gt;, yo subrayaría extensiva como eufemismo
de documentación burocrática e inútil (opiné de esto
&lt;a class="reference external" href="https://mgaitan.github.io/posts/compartiendo-documentacion-de/blog/article/veinteanero"&gt;acá&lt;/a&gt;) que evidentemente no es la que hace
falta. Pero la documentación (sobre todo la buena) es indispensable y
para &lt;a class="reference external" href="http://jacobian.org/writing/great-documentation/"&gt;algunos&lt;/a&gt;, la
parte que más los enorgullece del proyecto (y con razón).&lt;/p&gt;
&lt;p&gt;Desde el punto de vista técnico, escribir documentación (no &lt;a class="reference external" href="http://sphinx.pocoo.org/examples.html"&gt;sólo para
Python&lt;/a&gt;!) es bastante fácil con
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;restructuredText&lt;/a&gt; (qué feo
el sitio de docutils, che!) que es &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0287/"&gt;el markup estándar de los
pythonistas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sobre este markup funciona &lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;, el
generador de documentación más utilizado (por lejos) en el ecosistema de
Python. Es lo que usa la documentación de Python misma, la de Django y
casi todo proyecto conocido o por conocer.&lt;/p&gt;
&lt;p&gt;Entonces usamos restructuredText, usamos Sphinx, pero para &lt;a class="reference external" href="https://mgaitan.github.io/posts/compartiendo-documentacion-de/blog/article/la-sanguijuela-de-cuevana"&gt;nuestro
proyectito de morondanga&lt;/a&gt; que
no tiene web propia ni nada, ¿dónde subimos la documentación generada?
Veamos.&lt;/p&gt;
&lt;section id="usando-readthedocs-org"&gt;
&lt;h2&gt;Usando Readthedocs.org&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://readthedocs.org/docs/read-the-docs/en/latest/"&gt;Read the docs&lt;/a&gt;
es un sitio para hospedar documentación realizada con Sphinx. Sólo se
necesita indicarle el repositorio público del proyecto (svn, git,
mercurial, bazaar), subir los fuentes .rst y contenido estático
(imágenes) aptos para Sphinx en una carpeta /doc o /docs y el sitio se
encarga de bajar los fuentes de documentación y renderizarlos a HTML a
través de Sphinx.&lt;/p&gt;
&lt;p&gt;Estrictamente, usando rtfd.org (como le dicen &lt;a class="reference external" href="http://www.urbandictionary.com/define.php?term=RTFD&amp;amp;defid=2281638"&gt;los
amigos&lt;/a&gt;)
ni siquiera hace falta tener Sphinx instalado localmente.&lt;/p&gt;
&lt;p&gt;Más aun, por defecto actualiza diariamente, pero se puede utilizar un
"hook" para indicarle que actulice cuando "pusheamos" (o "commiteamos")
al repo, de manera de tener la documentación actualizada al instante.
Para usuarios de GitHub la activación del "web hook" se explica
&lt;a class="reference external" href="http://readthedocs.org/docs/read-the-docs/en/latest/webhooks.html#github"&gt;acá&lt;/a&gt;
. Para &lt;a class="reference external" href="http://bitbucket.org"&gt;BitBucket.org&lt;/a&gt; es parecido:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Vas a tu proyecto , click en Admin -&amp;gt; Services&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Agregás el servicio "POST"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Completás el campo de texto con la URL que te da ReadTheDocs en la
página de descripción de tu proyecto (estándo logueado). Por ejemplo:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="" src="https://mgaitan.github.io/posts/compartiendo-documentacion-de/local/cache-vignettes/L295xH73/2011-04-10-221400_295x73_scrot-15220.png"&gt;
&lt;/figure&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 60)&lt;/p&gt;
&lt;p&gt;Explicit markup ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Y listo. Tu docu al instante.&lt;/p&gt;
&lt;p&gt;Como el sitio genera el html en vez de servir una versión generada
previamente, la documentación que requiere introspección del código (
todas las directivas `` .. auto* :: `` de Sphinx) este debe poder
ejecutarse. Para eso el paquete debe ser instalable via &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; y
hay marcar desde la página de configuración del proyecto en RTFD.org,
que instale en un virtualenv.&lt;/p&gt;
&lt;p&gt;Para ver si hubo algún problema en la generación, podés fijarte en
"build" donde te muestra el stdout y el stderr de la corrida de Sphinx.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="subir-la-docu-a-pypi"&gt;
&lt;h2&gt;Subir la docu a PyPi&lt;/h2&gt;
&lt;p&gt;Una forma buenísima de compartir tu trabajo pythónico es a través del
Python Package Index, &lt;a class="reference external" href="http://pypi.python.org/pypi"&gt;pypi&lt;/a&gt;, que es el
índice que usan las herramientas &lt;a class="reference external" href="http://www.pip-installer.org"&gt;pip&lt;/a&gt; e
easy_install. Si bien no necesarimente los paquetes deben estar
hospedados allí (indicando en el setup.py la URL de descarga) es muy
común y fácil hacerlo con el comando &lt;code class="docutils literal"&gt;upload&lt;/code&gt; del setup.py.&lt;/p&gt;
&lt;p&gt;Lo que muchos no
&lt;a class="reference external" href="http://packages.python.org/an_example_pypi_project/buildanduploadsphinx.html"&gt;saben&lt;/a&gt;
es que PyPi también ofrece &lt;a class="reference external" href="http://packages.python.org/"&gt;hostear la
documentación&lt;/a&gt;. La forma canónica es ir a
la página de administración de tu proyecto en PyPi y adjuntar un .zip
con la documentación (que no necesariamente tiene que ser hecha con
Sphinx)&lt;/p&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="" src="https://mgaitan.github.io/posts/compartiendo-documentacion-de/local/cache-vignettes/L510xH111/2011-04-10-223417_605x131_scrot-d5e1d.png"&gt;
&lt;/figure&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 93)&lt;/p&gt;
&lt;p&gt;Explicit markup ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Pero si usamos Sphinx hay una manera más fácil, manteniendosé en el
"ecosistema" de desarrollo: usar esta &lt;a class="reference external" href="http://pypi.python.org/pypi/Sphinx-PyPI-upload/"&gt;extension de
setuptools&lt;/a&gt; que
permite generar el html a través Sphinx y subirlo automáticamente. Se
instala, obviamente, vía pypi:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ easy_install sphinx-pypi-upload&lt;/pre&gt;
&lt;p&gt;Hay que condigurar un &lt;code class="docutils literal"&gt;setup.cfg&lt;/code&gt; (ubicado al nivel raiz, junto con
&lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;) indicandole dónde está la docu fuente y dónde el
resultado. Más o menos así:&lt;/p&gt;
&lt;pre class="literal-block"&gt;[build_sphinx]
source-dir = doc/source
build-dir  = doc/build
all_files  = 1

[upload_sphinx]
upload-dir = doc/build/html&lt;/pre&gt;
&lt;p&gt;Luego se usa:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ python setup.py build_sphinx
$ python setup.py upload_sphinx&lt;/pre&gt;
&lt;p&gt;Y docu subida a la dire
&lt;em&gt;`http://packages.python.org/tu-proyecto &amp;lt;http://packages.python.org/tu-proyecto&amp;gt;`_&lt;/em&gt;
. ¡&lt;a class="reference external" href="http://packages.python.org/CuevanaLinks/"&gt;Charaaán&lt;/a&gt;!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="usando-tu-repositorio-svn"&gt;
&lt;h2&gt;Usando tu repositorio SVN&lt;/h2&gt;
&lt;p&gt;Si usas SVN y tu servidor lo permite, podés servir contenido estático
(html y todo lo que produce y necesita Sphinx) directamente desde el
repositorio.&lt;/p&gt;
&lt;p&gt;Para que el servidor Subversion muestre el html renderizado en vez del
código (como texto plano) hay que indicarle el tipo &lt;code class="docutils literal"&gt;mime&lt;/code&gt; de cada
archivo.&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ svn propset svn:mime-type 'text/html' FILENAME
$ svn propset svn:mime-type 'image/jpeg' FILENAME&lt;/pre&gt;
&lt;p&gt;Para que esto se haga automático, se puede modificar el archivo de
configuración &lt;a href="https://mgaitan.github.io/posts/compartiendo-documentacion-de/#system-message-1"&gt;&lt;span class="problematic" id="problematic-1"&gt;``&lt;/span&gt;&lt;/a&gt;~/.subversion/config ``&lt;/p&gt;
&lt;aside class="system-message" id="system-message-1"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 144); &lt;em&gt;&lt;a href="https://mgaitan.github.io/posts/compartiendo-documentacion-de/#problematic-1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline literal start-string without end-string.&lt;/p&gt;
&lt;/aside&gt;
&lt;pre class="literal-block"&gt;[miscellany]
enable-auto-props = yes

[auto-props]
*.html = svn:mime-type=text/html
*.css = svn:mime-type=text/css
*.js = svn:mime-type=text/javascript
*.png = svn:mime-type=image/png
*.jpg = svn:mime-type=image/jpeg
*.gif = svn:mime-type=image/gif&lt;/pre&gt;
&lt;p&gt;Un ejemplo de esto es el &lt;a class="reference external" href="http://gpec2010.googlecode.com/svn/trunk/docs/_build/html/index.html"&gt;reporte de mi proyecto
integrador&lt;/a&gt;
que está hospedado en Google Code&lt;/p&gt;
&lt;/section&gt;
&lt;section id="aprovechandote-de-github"&gt;
&lt;h2&gt;Aprovechándote de GitHub&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://github.com"&gt;GitHub&lt;/a&gt; hospeda &lt;a class="reference external" href="http://pages.github.com/"&gt;páginas
estáticas&lt;/a&gt;, tanto del desarrollador/a como
de tus proyectos. Bien sirve eso para subir la documentación y eso hacen
mas o menos automáticamente estas opciones que no he probado pero las
dejo como referencia:&lt;/p&gt;
&lt;p&gt;&lt;img alt="-" src="https://mgaitan.github.io/posts/compartiendo-documentacion-de/local/cache-vignettes/L8xH11/puce-32883.gif"&gt; &lt;a class="reference external" href="http://lucasbardella.com/report/hosting-your-sphinx-docs-in-github/"&gt;Hosting sphinx doc in
github&lt;/a&gt;
de Luca Sbardella.
&lt;img alt="image1" src="https://mgaitan.github.io/posts/compartiendo-documentacion-de/local/cache-vignettes/L8xH11/puce-32883.gif"&gt; &lt;a class="reference external" href="http://dinoboff.github.com/github-tools/overview.html#documentation-hosting"&gt;Usando
github-tools&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;</description><category>Metodologías ágiles</category><category>python</category><category>Software Libre</category><guid>https://mgaitan.github.io/posts/compartiendo-documentacion-de/</guid><pubDate>Sun, 10 Apr 2011 22:16:38 GMT</pubDate></item><item><title>Apuntes del PyCamp 2011</title><link>https://mgaitan.github.io/posts/apuntes-del-pycamp-2011/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;p&gt;Casi se hizo jueves y todavía no escribí nada sobre el
&lt;a class="reference external" href="http://python.org.ar/pyar/PyCamp/2011"&gt;PyCamp&lt;/a&gt;. Roberto
Alsina se va a enojar.&lt;/p&gt;
&lt;p&gt;La excusa, vaga como yo, es que la devolución de uno de mis directores
de &lt;a class="reference external" href="https://mgaitan.github.io/posts/apuntes-del-pycamp-2011/blog/article/preparados-listos-en-un-rato"&gt;tesis&lt;/a&gt; fue más
&lt;span class="strike"&gt;hinchapelotas&lt;/span&gt; minuciosa que lo esperado. Así que para
cumplir el &lt;a class="reference external" href="http://twitter.com/#!/tin_nqn_/status/48955773732134912"&gt;objetivo&lt;/a&gt;
tuve un amansador refactoring de 5pm a 6am cuyo resultado me permitió
conseguir un lacónico:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Recibido, pero recién lo puedo ver el viernes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Inmediatamente demostré que el lenguaje soez en arameo es un
conocimiento latente.&lt;/p&gt;
&lt;section id="a-modo-de-intro"&gt;
&lt;h2&gt;A modo de intro&lt;/h2&gt;
&lt;p&gt;El PyCamp es un encuentro de la
comunidad &lt;a class="reference external" href="http://www.python.org.ar"&gt;Python Argentina&lt;/a&gt;. Monos (y
pronto monas) con laptops afiladas se juntan en el algun rincón del país
con internet, preferentemente lejos de las grandes urbes (para darle
énfasis a eso de &lt;em&gt;camp&lt;/em&gt;) a programar software libre, hackear de lo
lindo, jugar jueguitos electrónicos y de los otros, tomar y beber en
bucle continuo y hacer cuanto le plazca a cada uno, en un ambiente
totalmente inclusivo, distendido y buena onda.&lt;/p&gt;
&lt;img alt="/images/5575373677_34553-e5833.jpg" src="https://mgaitan.github.io/images/5575373677_34553-e5833.jpg"&gt;
&lt;p&gt;Python Argentina abarca el amplio espectro que va desde programadores
reconocidos internacionalmente (gran parte de ese Ubuntu que seguro
estas usando — o deberías — lo hacen pythonistas argentinos) hasta
"newbies" que se anotaron en la lista con el único y nada despreciable
objetivo de callar al amigo que ya sabe un poco más y no para de
hincharle para que use Python (resulta que a los pocos dias, el
(ex)newbie ya está molestando a un tercero).&lt;/p&gt;
&lt;p&gt;Esa población tiene fiel reflejo en el PyCamp, pero grosos y finitos
tienen las mismas posibilidades de proponer, opinar y divertirse. Por
supuesto, es impagable lo que se aprende y son increíbles las cosas que
hacen los geeks cuando están divertidos.&lt;/p&gt;
&lt;p&gt;De estos encuentro salieron proyectos como
&lt;a class="reference external" href="http://www.cocos2d.org/"&gt;Cocos2d&lt;/a&gt;, la
&lt;a class="reference external" href="http://python.org.ar/pyar/Proyectos/CDPedia"&gt;CDPedia&lt;/a&gt; y
&lt;a class="reference external" href="http://www.taniquetil.com.ar/lalita/index.html"&gt;lalita&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="mi-experiencia"&gt;
&lt;h2&gt;Mi experiencia&lt;/h2&gt;
&lt;p&gt;El PyCamp 2011, el cuarto consecutivo, se realizó en La Falda y fue el
primero en el que participo. Sabía, por referencias, fotos y
repositorios, de qué se trataba, pero como dice el adagio... &lt;em&gt;del dicho
al hecho ...&lt;/em&gt;.&lt;/p&gt;
&lt;img alt="/images/5575974174_116c8-4028d.jpg" src="https://mgaitan.github.io/images/5575974174_116c8-4028d.jpg"&gt;
&lt;p&gt;Nati tenía un congreso de germanística en Buenos Aires y después se iba
a La Plata a visitar a una amiga, así que las opciones eran ir a la
marcha el jueves (24 de marzo) y
&lt;a class="reference external" href="https://mgaitan.github.io/posts/apuntes-del-pycamp-2011/post/yendo-a-las-fuentes-de-cuevana-tv"&gt;cuevanear&lt;/a&gt; el resto
del finde o sumarme a la movida.
&lt;a class="reference external" href="https://twitter.com/perrito666"&gt;Perrito&lt;/a&gt; ofreció movilidad así que lo
tuve servido.&lt;/p&gt;
&lt;p&gt;Salimos el jueves a la mañana y con nosotros venía
&lt;a class="reference external" href="https://twitter.com/malev"&gt;Malev&lt;/a&gt; y el organizador del evento, de pie
señores, Nueces.&lt;/p&gt;
&lt;p&gt;A lo largo de los 4 días de PyCamp, participé en la CDpedia (mejoré la
funcionalidad de "artículo al azar" y estuve haciendo unos benchmarks de
optimización en el peso de las imágenes), amagué con un filtro para
&lt;a class="reference external" href="https://bitbucket.org/edvm/pep8fy"&gt;Pep8fy&lt;/a&gt; que dejé medio inconcluso,
comí al menos el doble de lo que venía comiendo (bien la comida, che!),
jugué mi primer sesión de rol guiado por &lt;a class="reference external" href="http://protocultura.net/"&gt;el señor
ordenador&lt;/a&gt; (Alecu, un maestro!), malabareé
con las bolas (las de malabares) de
&lt;a class="reference external" href="http://humitos.wordpress.com/"&gt;Humitos&lt;/a&gt;, presencié en vivo la
gestación de un &lt;a class="reference external" href="https://www.youtube.com/watch?v=3lvThaowkPk"&gt;delirio mágico&lt;/a&gt;  de &lt;a class="reference external" href="http://ralsina.me/weblog/index.html"&gt;Roberto
Alsina&lt;/a&gt;, me metí a la pileta y
tomé sombra, perdí 0-5 0-5 los dos partidos de metegol y me cagué de
risa igual con mi &lt;a class="reference external" href="https://twitter.com/edvm"&gt;coequiper&lt;/a&gt; (¡fiesta!),
escribí "puto" (con onda, &lt;a class="reference external" href="http://www.felipelerena.com.ar/"&gt;Lipe&lt;/a&gt;)
desde un android con un &lt;a class="reference external" href="https://launchpad.net/faldatouch"&gt;librería para
multitouching&lt;/a&gt; que estos bestias
hicieron en una tarde, quedé pasmado con el vuelo de la discusión sobre
los motivos (y posibles acciones correctoras) de la baja participación
femenina en Python y el Software Libre en general, bebí vino, fernet,
cerveza y mistela (me colé en un contingente más adelantado que el
nuestro en la excursión del Hotel Edén, y después me volví con Flecox a
ver el partido de Argentina), jugué con Tato (el pythonista más peque
del encuentro, hijo de Roberto Alsina) y me enternecí viendo a otros
geeks (Huguito — &lt;a class="reference external" href="http://www.pilas-engine.com.ar"&gt;Pilas&lt;/a&gt; rulez! —,
John, Achuni, todos) jugar como niños.&lt;/p&gt;
&lt;img alt="/images/5575353897_b47ee-6529e.jpg" src="https://mgaitan.github.io/images/5575353897_b47ee-6529e.jpg"&gt;
&lt;p&gt;Detalles faltan pero estos someros recuerdos sobran para afirmar que el
balance es positivísimo.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="una-reflexion-final"&gt;
&lt;h2&gt;Una reflexión final&lt;/h2&gt;
&lt;p&gt;PyCamp contrasta totalmente con los grises, aburridos y mediocres
congresos académicos que en el ámbito universitario se difunden y en los
que alguna vez he participado, donde los papelitos cuentan y donde
(casi) todo se vuelve una ficción impulsada por la inercia y la
necesidad de "publicar" (no importa mucho que), para mantener la beca,
el statu quo y el viático.&lt;/p&gt;
&lt;p&gt;En PyCamp no se piden papeles ni se aplauden corbatas, la gente se llama
por el sobrenombre y no por el título, se admira el conocimiento pero
más se festeja su colectivización, y eso lo saben (y lo disfrutan) los
picantes y los tiernitos.&lt;/p&gt;
&lt;p&gt;Cuanta falta le hace a la universidad visiones y experiencias como esta.&lt;/p&gt;
&lt;/section&gt;</description><category>python</category><category>Software Libre</category><guid>https://mgaitan.github.io/posts/apuntes-del-pycamp-2011/</guid><pubDate>Wed, 30 Mar 2011 22:50:40 GMT</pubDate></item><item><title>Control de Versiones con Subversion</title><link>https://mgaitan.github.io/posts/Control-de-Versiones-con/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;p&gt;Xab, compañero de la lista
&lt;a class="reference external" href="http://listes.rezo.net/mailman/listinfo/spip-es"&gt;Spip-es&lt;/a&gt; me propone
un trato:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Abro una cuenta con magoya en picasa y testeo el
&lt;a class="reference external" href="https://mgaitan.github.io/posts/spicasa-adjunta-fotos-de-picasa-a"&gt;plugin&lt;/a&gt;, y a
cambio vos "hacés (o recomendás)" un how-to subversion aplicado a
Spip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Como tenía unos materiales de una charla que dí en la facu, lo comparto
con el pueblo spipero.&lt;/p&gt;
&lt;section id="subversion-un-software-de-control-de-versiones"&gt;
&lt;h2&gt;Subversion, un software de control de versiones&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://subversion.tigris.org/"&gt;Subversion&lt;/a&gt; es el software de control
de versiones más popular de la actualidad. Es robusto, fácil de usar,
multiplataforma, libre y gratuito.&lt;/p&gt;
&lt;p&gt;Aquí las diapositivas (un tanto frías sin nuestra explicación) que
presentamos.&lt;/p&gt;
&lt;p&gt;La pregunta del novato: &lt;strong&gt;¿Para qué sirve?&lt;/strong&gt;. Bueno, para llevar total
control del desarrollo de un software (u otros contenidos). Muchos lo
hemos hecho manualmente:&lt;/p&gt;
&lt;p&gt;— Bueno, hasta aqui funciona. Hago una carpeta nueva, copio los
archivos, y sigo.&lt;/p&gt;
&lt;p&gt;Así, al cabo de una semana de trabajo, tenemos 10 carpetas con versiones
distintas, archivos repetidos, y no sabemos realmente cual es la version
en curso. Más complicado aun, si se trabaja desde distintos equipos (por
ejemplo, la notebook y la PC de escritorio).&lt;/p&gt;
&lt;p&gt;Pero además, sumemos la complicación de trabajar con colegas.&lt;/p&gt;
&lt;p&gt;— Ey, Martín, acá te mando la última versión del esqueleto de portada.
— ¡Pero cómo! si te avisé que había modificado la portada completamente!&lt;/p&gt;
&lt;p&gt;Trabajar en equipo es casi inviable a la vieja usanza. Imaginen
proyectos de software grandes, como SPIP. Imposible. Hace falta ayuda:
Subversion.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="como-funciona"&gt;
&lt;h2&gt;¿Cómo funciona?&lt;/h2&gt;
&lt;p&gt;Es una aplicación cliente-servidor. El cliente se instala en nuestra/s
computadoras y el servidor está, generalmente, online. A este servidor
online se le denomina &lt;strong&gt;repositorio&lt;/strong&gt;. A la copia local de los archivos,
&lt;strong&gt;copia de trabajo&lt;/strong&gt;. A cada cambio que el repositorio recibe se le
llama &lt;strong&gt;revisión&lt;/strong&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Para Windows, el mejor cliente es
&lt;a class="reference external" href="http://tortoisesvn.tigris.org/"&gt;TortoiseSVN&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Para GNU/Linux, basta &lt;code class="docutils literal"&gt;subversion&lt;/code&gt;, la versión para línea de
comandos, o &lt;strong&gt;RapidSVN&lt;/strong&gt;, una versión gráfica para entornos GTK.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El proceso de trabajo es más o menos así:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Si no existe en el repositorio nuestro código, hacemos un
&lt;code class="docutils literal"&gt;import&lt;/code&gt; (enviar por primera vez nuestro código al repositorio.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Para empezar a trabajar, necesitamos hace un &lt;code class="docutils literal"&gt;checkout&lt;/code&gt;, es
decir, decirle a Subversion que convierta nuestra carpeta de código (o
la cree si no existe) en copia de trabajo.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ya preparados, el trabajo cotidiano: lo comandos más frecuentes
son tres. &lt;code class="docutils literal"&gt;update&lt;/code&gt;, para actualizar la copia local con las ultimas
revisiones; &lt;code class="docutils literal"&gt;commit&lt;/code&gt; para enviar nuestras modificaciones locales al
repositorio y crear una nueva revisión y &lt;code class="docutils literal"&gt;add&lt;/code&gt; para agregar un archivo
que hemos creado, y aun no existe en el repositorio.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="un-ejemplo-con-spip-zone"&gt;
&lt;h2&gt;Un ejemplo con SPIP-Zone&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://zone.spip.org"&gt;Spip-zone&lt;/a&gt; tiene un servidor subversion
(asociado al software &lt;a class="reference external" href="http://trac.edgewall.org/"&gt;Trac&lt;/a&gt; que es un
gestor integral de proyectos de software) donde se puede alojar
cualquier contenido libre que tenga que ver con SPIP. Es abierto para
lectura (podés hacer checkouts y updates anonimamente) pero necesitás
ser usuario para hacer commits. Podés pedirle un user y pass a
&lt;a class="reference external" href="mailto:fil@nospam--.rezo.net"&gt;Fil&lt;/a&gt;.&lt;/p&gt;
&lt;section id="paso-0"&gt;
&lt;h3&gt;Paso 0&lt;/h3&gt;
&lt;p&gt;Suponiendo que sos usuario con clave y password y querés compartir el
desarrollo de tus squeletos, los &lt;em&gt;squelettes_maslindos&lt;/em&gt; que están en la
carpeta squelettes local (por poner un ejemplo).&lt;/p&gt;
&lt;p&gt;La dirección del repositorio, arbitraria pero recomendada,
sería &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;svn://zone.spip.org/spip-zone/_squelettes_/maslindos&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Desde &lt;strong&gt;Tortoise&lt;/strong&gt;, con el boton derecho sobre la carpeta de esqueletos,
le damos a la opción &lt;code class="docutils literal"&gt;Import&lt;/code&gt; y ponemos la dire del repo donde la
pide.&lt;/p&gt;
&lt;p&gt;Desde línea de comandos sería&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ svn import ./squelettes  svn://zone.spip.org/spip-zone/_squelettes_/maslindos -m "importacion de los squeletos más lindos"&lt;/pre&gt;
&lt;p&gt;Si la importación salió bien, debería poder ver tus archivos en la
dirección &lt;a class="reference external" href="http://zone.spip.org/trac/spip-zone/browser/_squelettes_/maslindos"&gt;http://zone.spip.org/trac/spip-zone/browser/_squelettes_/maslindos&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="paso-1"&gt;
&lt;h3&gt;Paso 1&lt;/h3&gt;
&lt;p&gt;Este es el paso inicial para aquellos que quieren probar algo
que está en el repositorio, pero sin intenciones de enviar
modificaciones (sólo lectura). Tambien deben hacerlo aquellos que sí lo
van a hacer, porque la importación no implica que se haya creado una
copia de trabajo.&lt;/p&gt;
&lt;p&gt;Así que hay que hacer el &lt;strong&gt;checkout&lt;/strong&gt;. Si hiciste el paso anterior, para
evitar complicaciones, lo mejor es borrar la carpeta que importaste.&lt;/p&gt;
&lt;p&gt;Entonces sí, sobre la carpeta raiz (donde queremos que se cree la otra),
hacemo checkout a la dire del repo, definiendo que la copia local será
&lt;code class="docutils literal"&gt;./squelettes&lt;/code&gt; (si no, nos creará una que se llamará &lt;em&gt;maslindos&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;La dire del repo es la siempre:&lt;/p&gt;
&lt;pre class="literal-block"&gt;svn://zone.spip.org/spip-zone/_squelettes_/maslindos&lt;/pre&gt;
&lt;p&gt;Por línea de comandos sería así:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ svn checkout svn://zone.spip.org/spip-zone/_squelettes_/maslindos ./squelettes&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="pasos-2-y-3"&gt;
&lt;h3&gt;Pasos 2 y 3&lt;/h3&gt;
&lt;p&gt;Listo, tenemos nuetra copia de trabajo. Cada vez que queramos actualizar
a la ultima versión, parados sobre la carpeta, hacemos &lt;strong&gt;update&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ svn  update&lt;/pre&gt;
&lt;p&gt;Si somos desarrolladores, y queremos enviar nuestras modificaciones, hay
que hacer &lt;strong&gt;commit&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ svn  update&lt;/pre&gt;
&lt;p&gt;En caso de agregar archivos, hay que indicarselo a Subversion.&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ svn  add archivo1 archivo2 *jpg&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="un-video-vale-mas-que-mil-palabras"&gt;
&lt;h2&gt;Un video vale más que mil palabras&lt;/h2&gt;
&lt;p&gt;Un ejemplo de flujo de trabajo por línea de comandos&lt;/p&gt;
&lt;div class="youtube-video"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/P0XIj1w21YU?rel=0&amp;amp;wmode=transparent" frameborder="0" allow="encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;p&gt;Y otro ejemplo usando una interfaz gráfica.&lt;/p&gt;
&lt;div class="youtube-video"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/U3qVh9F6fv0?rel=0&amp;amp;wmode=transparent" frameborder="0" allow="encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/section&gt;</description><category>Software Libre</category><category>spip</category><guid>https://mgaitan.github.io/posts/Control-de-Versiones-con/</guid><pubDate>Sat, 14 Feb 2009 13:23:41 GMT</pubDate></item></channel></rss>