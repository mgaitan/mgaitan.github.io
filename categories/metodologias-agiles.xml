<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tin_nqn (Posts sobre Metodologías ágiles)</title><link>https://mgaitan.github.io/</link><description></description><atom:link href="https://mgaitan.github.io/categories/metodologias-agiles.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents © 2025 &lt;a href="mailto:gaitan@gmail.com"&gt;Martín Gaitán&lt;/a&gt; </copyright><lastBuildDate>Thu, 30 Oct 2025 23:03:50 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Compartiendo documentación de paquetes python</title><link>https://mgaitan.github.io/posts/compartiendo-documentacion-de/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;p&gt;Sabido es, aunque muchas veces se ignora, que un software sin
documentación está incompleto
[&lt;a class="reference external" href="https://mgaitan.github.io/blog/article/compartiendo-documentacion-de#nb1"&gt;1&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;Si bien el manifiesto ágil
&lt;a class="reference external" href="http://agilemanifesto.org/iso/es/"&gt;proclama&lt;/a&gt; &lt;em&gt;"Software funcionando
sobre documentación extensiva"&lt;/em&gt;, yo subrayaría extensiva como eufemismo
de documentación burocrática e inútil (opiné de esto
&lt;a class="reference external" href="https://mgaitan.github.io/posts/compartiendo-documentacion-de/blog/article/veinteanero"&gt;acá&lt;/a&gt;) que evidentemente no es la que hace
falta. Pero la documentación (sobre todo la buena) es indispensable y
para &lt;a class="reference external" href="http://jacobian.org/writing/great-documentation/"&gt;algunos&lt;/a&gt;, la
parte que más los enorgullece del proyecto (y con razón).&lt;/p&gt;
&lt;p&gt;Desde el punto de vista técnico, escribir documentación (no &lt;a class="reference external" href="http://sphinx.pocoo.org/examples.html"&gt;sólo para
Python&lt;/a&gt;!) es bastante fácil con
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;restructuredText&lt;/a&gt; (qué feo
el sitio de docutils, che!) que es &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0287/"&gt;el markup estándar de los
pythonistas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sobre este markup funciona &lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;, el
generador de documentación más utilizado (por lejos) en el ecosistema de
Python. Es lo que usa la documentación de Python misma, la de Django y
casi todo proyecto conocido o por conocer.&lt;/p&gt;
&lt;p&gt;Entonces usamos restructuredText, usamos Sphinx, pero para &lt;a class="reference external" href="https://mgaitan.github.io/posts/compartiendo-documentacion-de/blog/article/la-sanguijuela-de-cuevana"&gt;nuestro
proyectito de morondanga&lt;/a&gt; que
no tiene web propia ni nada, ¿dónde subimos la documentación generada?
Veamos.&lt;/p&gt;
&lt;section id="usando-readthedocs-org"&gt;
&lt;h2&gt;Usando Readthedocs.org&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://readthedocs.org/docs/read-the-docs/en/latest/"&gt;Read the docs&lt;/a&gt;
es un sitio para hospedar documentación realizada con Sphinx. Sólo se
necesita indicarle el repositorio público del proyecto (svn, git,
mercurial, bazaar), subir los fuentes .rst y contenido estático
(imágenes) aptos para Sphinx en una carpeta /doc o /docs y el sitio se
encarga de bajar los fuentes de documentación y renderizarlos a HTML a
través de Sphinx.&lt;/p&gt;
&lt;p&gt;Estrictamente, usando rtfd.org (como le dicen &lt;a class="reference external" href="http://www.urbandictionary.com/define.php?term=RTFD&amp;amp;defid=2281638"&gt;los
amigos&lt;/a&gt;)
ni siquiera hace falta tener Sphinx instalado localmente.&lt;/p&gt;
&lt;p&gt;Más aun, por defecto actualiza diariamente, pero se puede utilizar un
"hook" para indicarle que actulice cuando "pusheamos" (o "commiteamos")
al repo, de manera de tener la documentación actualizada al instante.
Para usuarios de GitHub la activación del "web hook" se explica
&lt;a class="reference external" href="http://readthedocs.org/docs/read-the-docs/en/latest/webhooks.html#github"&gt;acá&lt;/a&gt;
. Para &lt;a class="reference external" href="http://bitbucket.org"&gt;BitBucket.org&lt;/a&gt; es parecido:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Vas a tu proyecto , click en Admin -&amp;gt; Services&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Agregás el servicio "POST"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Completás el campo de texto con la URL que te da ReadTheDocs en la
página de descripción de tu proyecto (estándo logueado). Por ejemplo:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="" src="https://mgaitan.github.io/posts/compartiendo-documentacion-de/local/cache-vignettes/L295xH73/2011-04-10-221400_295x73_scrot-15220.png"&gt;
&lt;/figure&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 60)&lt;/p&gt;
&lt;p&gt;Explicit markup ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Y listo. Tu docu al instante.&lt;/p&gt;
&lt;p&gt;Como el sitio genera el html en vez de servir una versión generada
previamente, la documentación que requiere introspección del código (
todas las directivas `` .. auto* :: `` de Sphinx) este debe poder
ejecutarse. Para eso el paquete debe ser instalable via &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; y
hay marcar desde la página de configuración del proyecto en RTFD.org,
que instale en un virtualenv.&lt;/p&gt;
&lt;p&gt;Para ver si hubo algún problema en la generación, podés fijarte en
"build" donde te muestra el stdout y el stderr de la corrida de Sphinx.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="subir-la-docu-a-pypi"&gt;
&lt;h2&gt;Subir la docu a PyPi&lt;/h2&gt;
&lt;p&gt;Una forma buenísima de compartir tu trabajo pythónico es a través del
Python Package Index, &lt;a class="reference external" href="http://pypi.python.org/pypi"&gt;pypi&lt;/a&gt;, que es el
índice que usan las herramientas &lt;a class="reference external" href="http://www.pip-installer.org"&gt;pip&lt;/a&gt; e
easy_install. Si bien no necesarimente los paquetes deben estar
hospedados allí (indicando en el setup.py la URL de descarga) es muy
común y fácil hacerlo con el comando &lt;code class="docutils literal"&gt;upload&lt;/code&gt; del setup.py.&lt;/p&gt;
&lt;p&gt;Lo que muchos no
&lt;a class="reference external" href="http://packages.python.org/an_example_pypi_project/buildanduploadsphinx.html"&gt;saben&lt;/a&gt;
es que PyPi también ofrece &lt;a class="reference external" href="http://packages.python.org/"&gt;hostear la
documentación&lt;/a&gt;. La forma canónica es ir a
la página de administración de tu proyecto en PyPi y adjuntar un .zip
con la documentación (que no necesariamente tiene que ser hecha con
Sphinx)&lt;/p&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="" src="https://mgaitan.github.io/posts/compartiendo-documentacion-de/local/cache-vignettes/L510xH111/2011-04-10-223417_605x131_scrot-d5e1d.png"&gt;
&lt;/figure&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 93)&lt;/p&gt;
&lt;p&gt;Explicit markup ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Pero si usamos Sphinx hay una manera más fácil, manteniendosé en el
"ecosistema" de desarrollo: usar esta &lt;a class="reference external" href="http://pypi.python.org/pypi/Sphinx-PyPI-upload/"&gt;extension de
setuptools&lt;/a&gt; que
permite generar el html a través Sphinx y subirlo automáticamente. Se
instala, obviamente, vía pypi:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ easy_install sphinx-pypi-upload&lt;/pre&gt;
&lt;p&gt;Hay que condigurar un &lt;code class="docutils literal"&gt;setup.cfg&lt;/code&gt; (ubicado al nivel raiz, junto con
&lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;) indicandole dónde está la docu fuente y dónde el
resultado. Más o menos así:&lt;/p&gt;
&lt;pre class="literal-block"&gt;[build_sphinx]
source-dir = doc/source
build-dir  = doc/build
all_files  = 1

[upload_sphinx]
upload-dir = doc/build/html&lt;/pre&gt;
&lt;p&gt;Luego se usa:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ python setup.py build_sphinx
$ python setup.py upload_sphinx&lt;/pre&gt;
&lt;p&gt;Y docu subida a la dire
&lt;em&gt;`http://packages.python.org/tu-proyecto &amp;lt;http://packages.python.org/tu-proyecto&amp;gt;`_&lt;/em&gt;
. ¡&lt;a class="reference external" href="http://packages.python.org/CuevanaLinks/"&gt;Charaaán&lt;/a&gt;!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="usando-tu-repositorio-svn"&gt;
&lt;h2&gt;Usando tu repositorio SVN&lt;/h2&gt;
&lt;p&gt;Si usas SVN y tu servidor lo permite, podés servir contenido estático
(html y todo lo que produce y necesita Sphinx) directamente desde el
repositorio.&lt;/p&gt;
&lt;p&gt;Para que el servidor Subversion muestre el html renderizado en vez del
código (como texto plano) hay que indicarle el tipo &lt;code class="docutils literal"&gt;mime&lt;/code&gt; de cada
archivo.&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ svn propset svn:mime-type 'text/html' FILENAME
$ svn propset svn:mime-type 'image/jpeg' FILENAME&lt;/pre&gt;
&lt;p&gt;Para que esto se haga automático, se puede modificar el archivo de
configuración &lt;a href="https://mgaitan.github.io/posts/compartiendo-documentacion-de/#system-message-1"&gt;&lt;span class="problematic" id="problematic-1"&gt;``&lt;/span&gt;&lt;/a&gt;~/.subversion/config ``&lt;/p&gt;
&lt;aside class="system-message" id="system-message-1"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 144); &lt;em&gt;&lt;a href="https://mgaitan.github.io/posts/compartiendo-documentacion-de/#problematic-1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline literal start-string without end-string.&lt;/p&gt;
&lt;/aside&gt;
&lt;pre class="literal-block"&gt;[miscellany]
enable-auto-props = yes

[auto-props]
*.html = svn:mime-type=text/html
*.css = svn:mime-type=text/css
*.js = svn:mime-type=text/javascript
*.png = svn:mime-type=image/png
*.jpg = svn:mime-type=image/jpeg
*.gif = svn:mime-type=image/gif&lt;/pre&gt;
&lt;p&gt;Un ejemplo de esto es el &lt;a class="reference external" href="http://gpec2010.googlecode.com/svn/trunk/docs/_build/html/index.html"&gt;reporte de mi proyecto
integrador&lt;/a&gt;
que está hospedado en Google Code&lt;/p&gt;
&lt;/section&gt;
&lt;section id="aprovechandote-de-github"&gt;
&lt;h2&gt;Aprovechándote de GitHub&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://github.com"&gt;GitHub&lt;/a&gt; hospeda &lt;a class="reference external" href="http://pages.github.com/"&gt;páginas
estáticas&lt;/a&gt;, tanto del desarrollador/a como
de tus proyectos. Bien sirve eso para subir la documentación y eso hacen
mas o menos automáticamente estas opciones que no he probado pero las
dejo como referencia:&lt;/p&gt;
&lt;p&gt;&lt;img alt="-" src="https://mgaitan.github.io/posts/compartiendo-documentacion-de/local/cache-vignettes/L8xH11/puce-32883.gif"&gt; &lt;a class="reference external" href="http://lucasbardella.com/report/hosting-your-sphinx-docs-in-github/"&gt;Hosting sphinx doc in
github&lt;/a&gt;
de Luca Sbardella.
&lt;img alt="image1" src="https://mgaitan.github.io/posts/compartiendo-documentacion-de/local/cache-vignettes/L8xH11/puce-32883.gif"&gt; &lt;a class="reference external" href="http://dinoboff.github.com/github-tools/overview.html#documentation-hosting"&gt;Usando
github-tools&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;</description><category>Metodologías ágiles</category><category>python</category><category>Software Libre</category><guid>https://mgaitan.github.io/posts/compartiendo-documentacion-de/</guid><pubDate>Sun, 10 Apr 2011 22:16:38 GMT</pubDate></item><item><title>La academia, las prácticas ágiles y el UML</title><link>https://mgaitan.github.io/posts/la-academia-las-practicas-agiles-y/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;p&gt;La manera más fácil para aprobar una tesis de ingeniería es mentir.
Llenar páginas y páginas, preferentemente con tablas y viñetas, de
contenidos vacuos y tediosos que seguramente nadie, mucho menos los
evaluadores, leerán. Sólo hay que prestar atención a que sean muchas
páginas y lo más simétricas posibles.&lt;/p&gt;
&lt;p&gt;El ejemplo paradigmático de esto son las &lt;a class="reference external" href="http://www.google.com/search?q=plantilla+caso+de+uso"&gt;especificaciones formales de
casos de uso&lt;/a&gt;,
pasión de burócratas que tienen cabida donde no hace falta demostrar
mucho.&lt;/p&gt;
&lt;p&gt;Pero también el UML, me atrevo a decir, en su mayor parte y nivel de
detalle es secuaz de esta ignominia que pauperiza el nivel del software
académico: en vez de saber programar y poder leer código, se presta
atención a los dibujitos, poniendo el grito en el cielo si la flechita
es negra en vez de blanca, como dice
&lt;a class="reference external" href="http://www.comp.lancs.ac.uk/computing/resources/IanS/"&gt;Sommerville&lt;/a&gt;
que debe ser.&lt;/p&gt;
&lt;p&gt;Como no me gusta mentir, la facilidad no me seduce de más (tampoco la
dificultad) y estoy bastante conforme con &lt;a class="reference external" href="http://code.google.com/p/gpec2010/"&gt;lo que
hice&lt;/a&gt; me animé a ser sensato en
expresar cómo hice mi trabajo.&lt;/p&gt;
&lt;p&gt;No me encerré 6 meses a hacer dibujitos que resultarían perfectos,
inescrutables y luego harían la programación trivial. Eso, al menos en
mi experiencia, no existe (sospecho que ellos todos lo saben, lo que
exacerba la hipocresía). Sí, en cambio, hice algunos dibujitos que me
ayudaran a entender (y dar a entender) cómo iba la cosa, mientras iba
programando y evaluando si estaba bien encaminado.&lt;/p&gt;
&lt;p&gt;Este espíritu es el que cobijan las &lt;a class="reference external" href="http://agilemanifesto.org/iso/es/"&gt;prácticas
ágiles&lt;/a&gt;, que es el marco conceptual
(metodológico) que adopté.&lt;/p&gt;
&lt;p&gt;La cuestión es que, para ganarle al &lt;em&gt;unknow how&lt;/em&gt; de los hombres de
corbata, hay que justificar con nombres que les suenen admirables. Hay
que mencionar mucho IBM, Microsoft, C#, Intel. Esas son las voces que
respetan, aunque sean pura
&lt;a class="reference external" href="http://es.wikipedia.org/wiki/Argumento_de_autoridad"&gt;falacia&lt;/a&gt;&lt;/p&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="" src="https://mgaitan.github.io/posts/la-academia-las-practicas-agiles-y/local/cache-vignettes/L510xH603/anti-bullying-charity-school-tie-small-59832-3938a.jpg"&gt;
&lt;/figure&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 45)&lt;/p&gt;
&lt;p&gt;Explicit markup ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Yo justifiqué
&lt;a class="reference external" href="http://code.google.com/p/gpec2010/source/browse/trunk/docs/metodologia.rst?spec=svn232&amp;amp;r=232#92"&gt;así&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Según afirma Terry Quatrani, evangelizadora de las metodologías
ágiles de IBM, en &lt;a class="reference external" href="http://agilescout.com/agile-modeling-and-uml/"&gt;The Truth About Agile
Modeling&lt;/a&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aunque sigas un proceso ágil, estarás realizando cierto grado de
modelado – sólo que no lo realizarás tanto como si utilizaras un
proceso tradicional. La falta de formalidad en el modelado ágil
no significa que no estás modelando, sino que te pones el foco
en los beneficios de este sin las desventajas y confusiones de
documentos extraños y burocráticos.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Por su parte, Robert Martin sostiene en &lt;a class="reference external" href="http://stackoverflow.com/questions/61487/do-you-use-uml-in-agile-development-practices"&gt;*Agile Principles,
Patterns, and Practices in
C#*&lt;/a&gt;
que el modelado basado en UML en el desarrollo ágil es útil como
instrumento de comunicación, pero su detalle no aporta valor
significativo:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No gastes mucho tiempo en esta tarea, no necesitas tanto
detalle. Los modelos y los planos son necesarios en la
arquitectura y la construcción civil porque es caro construir
una casa para demostrar que su diseño funciona. El software no
es así – puedes validar tu idea con sólo codificarla, en igual
tiempo que el que insume hacer un modelo UML que nada prueba por
sí mismo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Aun más escéptico, Alans Stevens, reconocido ingeniero en software
[&lt;a class="reference external" href="https://mgaitan.github.io/blog/article/la-academia-las-practicas-agiles-y#nb1"&gt;1&lt;/a&gt;] y
conferencista, opina &lt;a class="reference external" href="http://halanstevens.com/uml-sucks-really/"&gt;en un
artículo&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No uso UML y noto que ninguno de mis colegas lo usa. Tengo
sensaciones mezcladas acerca de su necesidad. Parece
perfectamente razonable que debamos acordar como industria un
conjunto de símbolos comunes para representar la programación
orientada a objetos, pero UML tiene la típica apariencia de
"diseñado por un comité".&lt;/p&gt;
&lt;p&gt;(...) El aspecto más crítico en un diseño inicial, en mi
experiencia, es la interfaz entre la UI y el modelo de objetos.
Lamentablemente UML no aborda este problema y en cambio parece
obsesionado por las minucias en una parodia de distracción
académica.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</description><category>Metodologías ágiles</category><guid>https://mgaitan.github.io/posts/la-academia-las-practicas-agiles-y/</guid><pubDate>Wed, 06 Apr 2011 09:21:23 GMT</pubDate></item></channel></rss>