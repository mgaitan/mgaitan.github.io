<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tin_nqn (Posts sobre jQuery)</title><link>https://mgaitan.github.io/</link><description></description><atom:link href="https://mgaitan.github.io/categories/jquery.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents © 2025 &lt;a href="mailto:gaitan@gmail.com"&gt;Martín Gaitán&lt;/a&gt; </copyright><lastBuildDate>Fri, 31 Oct 2025 17:59:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Yendo a las fuentes de cuevana.tv</title><link>https://mgaitan.github.io/posts/yendo-a-las-fuentes-de-cuevana-tv/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;p&gt;** UPDATE ** : la ultima version funciona con el nuevo sitio de cuevana.&lt;/p&gt;
&lt;p&gt;Dos cosas me gustan mucho últimamente:
&lt;a class="reference external" href="http://www.cuevana.tv"&gt;cuevana.tv&lt;/a&gt; y
&lt;a class="reference external" href="http://www.greasespot.net/"&gt;GreaseMonkey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cuevana es un sitio para ver series y películas online, en streaming de
alta calidad, con subtitulos y todo. El truco está en un plugincito que
hace instalar en el navegador que permite reproducir (en un reproductor
basado en flash comunacho) un archivo que se descarga de megaupload,
filefactory o sitios por el estilo. El ancho de banda lo ponen otros, la
alegría es toda de cuevana (y nuestra). Todos unos pillos.&lt;/p&gt;
&lt;p&gt;Lamentablemente, mi conexión no se banca un streaming de alta calidad
(como los videos de cuevana) sin bufferear (?) y entonces pierde sentido
(o gana mala sangre) intentar ver directamente "online".&lt;/p&gt;
&lt;p&gt;Y acá entra &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Greasemonkey"&gt;Greasemonkey&lt;/a&gt;,
que es una extensión para Firefox (y otros navegadores) que permite
agregar scripts (en javascript) para modificar localmente las páginas
que indiquemos.&lt;/p&gt;
&lt;p&gt;Con esta herramienta, programadores voluntarios crean &lt;a class="reference external" href="http://userscripts.org/"&gt;cientos de
scripts&lt;/a&gt; para mejorar la estética o
funcionalidad de muchos sitios, conocidos o no.&lt;/p&gt;
&lt;p&gt;Mi &lt;a class="reference external" href="http://userscripts.org/scripts/show/98017"&gt;primer aporte&lt;/a&gt; a la
"comunidad Greasemonkera" (y cuevanera) intenta subsanar la
discriminación que el streaming de alta calidad tiene con los que
tenemos un ancho de banda no muy ancho.&lt;/p&gt;
&lt;p&gt;Una vez
&lt;a class="reference external" href="http://userscripts.org/scripts/source/98017.user.js"&gt;instalado&lt;/a&gt; el
script muestra links a la fuente original de descarga, justo abajo de
los iconos de selección.&lt;/p&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="" src="https://mgaitan.github.io/posts/yendo-a-las-fuentes-de-cuevana-tv/local/cache-vignettes/L510xH298/2011-02-28-011028_584x341_scrot-37636.png"&gt;
&lt;/figure&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 40)&lt;/p&gt;
&lt;p&gt;Explicit markup ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Así podemos bajar los videos y verlos offline.&lt;/p&gt;
&lt;p&gt;Como complemento, se pueden copiar y pegar los links en un gestor de
descargas como &lt;a class="reference external" href="http://www.tucaneando.com/"&gt;Tucan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[STRIKEOUT:Respecto a los subtítulos, todavía soy principiante con
javascript, pero espero poder obtener el link a los subtitulos en
futuras versiones. ]&lt;/p&gt;</description><category>Javascript</category><category>jQuery</category><guid>https://mgaitan.github.io/posts/yendo-a-las-fuentes-de-cuevana-tv/</guid><pubDate>Mon, 28 Feb 2011 15:24:40 GMT</pubDate></item><item><title>Limitar la cantidad de caracteres de los comentarios</title><link>https://mgaitan.github.io/posts/limitar-la-cantidad-de-caracteres/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;p&gt;Si Twitter funciona con 140 caracteres los comentarios a nuestros
artículos podrían tener 200, ¿no?&lt;/p&gt;
&lt;p&gt;Hay una forma fácil de limitar el largo permitido en un campo de texto
mediante jQuery, que vaya mostrando de manera interactiva la cantidad de
caracteres restantes.&lt;/p&gt;
&lt;p&gt;Por ejemplo, esto limita el tamaño de un comentario en SPIP.&lt;/p&gt;
&lt;pre class="literal-block"&gt; $(document).ready(function () {

     $("#texte").before("&amp;lt;div id='chars' style='float:right;font-weigth:strong;margin-right:5px;'&amp;gt;&amp;lt;/div&amp;gt;");

$(function(){
    $('#texte').keyup(function(){
        limitChars('texte', 200, 'chars');
    })
    });
 });

function limitChars(textid, limit, infodiv) {
     var text = $('#'+textid).val();
     var textlength = text.length;
     if(textlength &amp;gt; limit) {
         $('#' + infodiv).html('No puede ingresar m&amp;amp;aacute;s de '+limit+' caracteres');
         $('#'+textid).val(text.substr(0,limit));
         return false;
     } else {
         $('#' + infodiv).html('Restan '+ (limit - textlength) +' caracteres.');
         return true;
     }
}&lt;/pre&gt;
&lt;section id="intrucciones-para-spip"&gt;
&lt;h2&gt;Intrucciones para SPIP&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Copiar el código&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pegarlo luego de la baliza #INSERT_HEAD de tu cabecera&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(opcional) Cambiarle el límite (el número 200),&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;¡Listo!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="intrucciones-generales"&gt;
&lt;h2&gt;Intrucciones generales&lt;/h2&gt;
&lt;p&gt;Es igual al anterior, sólo debes asegurarte que tiene en jquery en la
página. Luego cambia el selector &lt;code class="docutils literal"&gt;#texte&lt;/code&gt; por el que corresponda al
campo que querés limitar.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ejemplo"&gt;
&lt;h2&gt;Ejemplo&lt;/h2&gt;
&lt;/section&gt;</description><category>jQuery</category><category>spip</category><guid>https://mgaitan.github.io/posts/limitar-la-cantidad-de-caracteres/</guid><pubDate>Wed, 10 Jun 2009 09:41:37 GMT</pubDate></item><item><title>Lorem Ipsum para Spip</title><link>https://mgaitan.github.io/posts/lorem-ipsum-para-spip/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;p&gt;&lt;a class="reference external" href="http://es.wikipedia.org/wiki/Lorem_ipsum"&gt;Lorem ipsum&lt;/a&gt; es el texto
que se usa habitualmente en diseño gráfico en demostraciones de
tipografías o de borradores de diseño para probar el diseño visual antes
de insertar el texto final.&lt;/p&gt;
&lt;p&gt;Cuando estamos desarrollando necesitamos ver cómo quedará el contenido,
y debemos recurrir a un &lt;em&gt;copy &amp;amp; paste&lt;/em&gt; de caulquier cosa que tengamos a
mano.&lt;/p&gt;
&lt;p&gt;La ventaja de un &lt;em&gt;Lorem Ipsum&lt;/em&gt; sobre otros textos, es que este tiene una
distribución del largo de las palabras bastante natural de las palabras
lo que en textos largos queda mucho mejor que repetir un mismo fragmento
una y otra vez.&lt;/p&gt;
&lt;p&gt;Hay muchos &lt;a class="reference external" href="http://www.lipsum.com/"&gt;generadores de texto Lorem Ipsum&lt;/a&gt;
en internet, pero lo podemos hacer aún más fácil.&lt;/p&gt;
&lt;section id="un-lorem-ipsum-automatico"&gt;
&lt;h2&gt;Un Lorem Ipsum automático&lt;/h2&gt;
&lt;p&gt;Con la ayuda del plugin &lt;a class="reference external" href="http://sanderkorvemaker.nl/jquery/jLorem.php"&gt;jQuery Lorem
Ipsum&lt;/a&gt; de Sander Korve
hice un modelo (instalable como plugin) que permite insertar un texto
del tamaño que queramos (por omisión, de 4 párrafos).&lt;/p&gt;
&lt;p&gt;Podés bajarlo desde acá:&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://mgaitan.github.io/downloads/loremipsum.zip"&gt;|image1|&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Lorem Ipsum Plugin version 0.2&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;O por SVN:&lt;/p&gt;
&lt;pre class="literal-block"&gt;svn checkout svn://zone.spip.org/spip-zone/_plugins_/_test_/loremipsum&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="instalacion"&gt;
&lt;h2&gt;Instalación&lt;/h2&gt;
&lt;p&gt;La instalación es igual que con la de cualquier plugin: descomprimirlo
en la carpeta &lt;em&gt;/plugins&lt;/em&gt; y activarlo.&lt;/p&gt;
&lt;p&gt;Requiere además que los esqueletos tengan la baliza &lt;code class="docutils literal"&gt;#INSERT_HEAD&lt;/code&gt;
dentro del header, ya que allí se incluirá el javascript necesario para
su funcionamiento.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="funcionamiento-basico"&gt;
&lt;h2&gt;Funcionamiento básico&lt;/h2&gt;
&lt;p&gt;La inclusión de un &lt;em&gt;Lorem Ipsum&lt;/em&gt; se basa en el modelo &lt;em&gt;lorem.html&lt;/em&gt;
incluído con el plugin, por lo que hay dos maneras de llamarlo:&lt;/p&gt;
&lt;p&gt;&lt;img alt="-" src="https://mgaitan.github.io/posts/lorem-ipsum-para-spip/local/cache-vignettes/L8xH11/puce-32883.gif"&gt; En el cuerpo (texto, descripción, etc) de un artículo: &lt;code class="docutils literal"&gt;&amp;lt;lorem&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image3" src="https://mgaitan.github.io/posts/lorem-ipsum-para-spip/local/cache-vignettes/L8xH11/puce-32883.gif"&gt; Predefinido en un esqueleto: &lt;code class="docutils literal"&gt;#MODELE{lorem}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;¡y listo!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="parametros"&gt;
&lt;h2&gt;Parámetros&lt;/h2&gt;
&lt;p&gt;El modelo acepta algunos parámetros para configurar la longitud del
texto. Por ejemplo &lt;code class="docutils literal"&gt;&amp;lt;lorem5&amp;gt;&lt;/code&gt; creará 5 párrafos.&lt;/p&gt;
&lt;p&gt;Pero también se puede especificar más datos:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image4" src="https://mgaitan.github.io/posts/lorem-ipsum-para-spip/local/cache-vignettes/L8xH11/puce-32883.gif"&gt; &lt;strong&gt;type&lt;/strong&gt;: permite especificar que tipo de resultado se quiere.
Las opciones válidas son &lt;strong&gt;paragraphs&lt;/strong&gt;, &lt;strong&gt;words&lt;/strong&gt; o &lt;strong&gt;characters&lt;/strong&gt; para
párrafos, palabras o characteres. Así: creará un texto de 25 palabras.
El valor por omisión es &lt;strong&gt;paragraphs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image5" src="https://mgaitan.github.io/posts/lorem-ipsum-para-spip/local/cache-vignettes/L8xH11/puce-32883.gif"&gt; &lt;strong&gt;amount&lt;/strong&gt;: Es lo mismo que el ID pasado al modelo: es lo mismo
que . Por ejemplo &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;[(#MODELE{lorem}{amount=5})]&lt;/span&gt;&lt;/code&gt;
[&lt;a class="reference external" href="https://mgaitan.github.io/blog/article/lorem-ipsum-para-spip#nb1"&gt;1&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;&lt;img alt="image6" src="https://mgaitan.github.io/posts/lorem-ipsum-para-spip/local/cache-vignettes/L8xH11/puce-32883.gif"&gt; &lt;strong&gt;ptags&lt;/strong&gt;: Permite agregar las etiquetas &amp;lt;code&amp;lt;&amp;gt;P&amp;lt;&amp;gt;/code&amp;gt;
alrededor de cada párrafo. Los valores aceptados son &lt;strong&gt;true&lt;/strong&gt; o
&lt;strong&gt;false&lt;/strong&gt;. Por omisión es &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="una-astucia"&gt;
&lt;h2&gt;Una astucia&lt;/h2&gt;
&lt;p&gt;Una forma de mostrar contenido en un artículo (o cualquier elemento) sin
tener que editar cada artículo sólo para poner &lt;code class="docutils literal"&gt;&amp;lt;lorem&amp;gt;&lt;/code&gt; es invocar el
modelo siempre y cuando no exista contenido en la baliza&lt;/p&gt;
&lt;p&gt;Por ejemplo [&lt;a class="reference external" href="https://mgaitan.github.io/blog/article/lorem-ipsum-para-spip#nb2"&gt;2&lt;/a&gt;]:&lt;/p&gt;
&lt;/section&gt;</description><category>jQuery</category><category>spip</category><guid>https://mgaitan.github.io/posts/lorem-ipsum-para-spip/</guid><pubDate>Thu, 26 Mar 2009 23:39:24 GMT</pubDate></item><item><title>Una mejor manera de controlar los atributos en spip</title><link>https://mgaitan.github.io/posts/una-mejor-manera-de-controlar-los/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;p&gt;Muchas balizas SPIP generan código HTML como salida (las balizas
#LOGO_* y los filtros |image_* son los más notorios) y
frecuentemente necesitamos o queremos modificar este código autogenerado
en nuestros esqueletos. Hay diversos filtros para ayudarnos a esto
(&lt;a class="reference external" href="http://www.spip.net/en_article2465.html#inserer_attribut"&gt;inserer_attribut&lt;/a&gt;
para insertar atributos y
&lt;a class="reference external" href="http://www.spip.net/en_article2465.html#extraire_attribut"&gt;extraire_attribut&lt;/a&gt;
para extraer el valor de uno generado) pero son particularmente largos y
tediosos de tipear.&lt;/p&gt;
&lt;p&gt;Más allá de eso, aunque uso estos filtros bastantes seguido para
implementar cosas como galerías de imágenes, todavía pienso lo difícil
que es escribir las palabras en francés sin equivocarme. Por suerte, un
pequeño wrapper, puede suavizar este inconveniente.&lt;/p&gt;
&lt;p&gt;Cuando se trata de acceder y modificar atributos de valores de atributos
nada, en mi opinión, llega tan lejos como &lt;a class="reference external" href="http://docs.jquery.com/Attributes"&gt;la API de atributos de
jQuery&lt;/a&gt;. El &lt;a class="reference external" href="http://docs.jquery.com/Attributes/attr"&gt;método de jQuery
*attr*&lt;/a&gt; por sí solo, permite
leer y escribir el valor de cualquier atributo en cualquier nodo. Recibe
uno o dos parámetros, el nombre del atributo, y opcionalmente, el valor.&lt;/p&gt;
&lt;p&gt;Si sólo se especifica el nombre, entonces &lt;em&gt;attr&lt;/em&gt; extrae y devuelve el
valor de ese atributo. Si ambos parámetros son pasados al método,
entonces attr modifica el objeto configurando el atributo en cuestión
con el valor dado. Es jerga de Programación Orientada a Objetos, es un
estilo de interfaz "polimórfica" — cuando un solo método tiene dos
comportamientos complementarios que son distinguidos por el número y/o
el tipo de los argumentos dados — que está por todos lados en jQuery y
es una de las razones por las que este framework es tan conciso y
productivo.&lt;/p&gt;
&lt;p&gt;Considerandola como la mejor estructura para este tipo de interfaces que
conozco (y también, que uso diariamente), decidí ue mi wrapper tendría
que copiarlo. Así fue como el &lt;em&gt;attr&lt;/em&gt; nació.&lt;/p&gt;
&lt;p&gt;Como el método de jQuery, el filtro &lt;em&gt;attr&lt;/em&gt; de SPIP toma uno o dos
parámetros (y un objeto "implícito", pero lo ignoraremos por el
momento). Si sólo pasamos uno, este lo remite como entrada a
&lt;em&gt;extraire_attribut&lt;/em&gt; para obtener el valor correspondiente. Si se lo
llama con dos parámetros, entonces llama a &lt;em&gt;inserer_attribut&lt;/em&gt; para
modificar el objeto.&lt;/p&gt;
&lt;p&gt;Como la idea, el código es razonablemente sencillo; la únca&lt;/p&gt;
&lt;p&gt;Like the idea, the code is reasonably straightforward; quizas lo único
un poco inusual el uso de
&lt;a class="reference external" href="http://php.net/func_get_args"&gt;func_get_args&lt;/a&gt; para obtener el
conjunto de los argumentos pasados a la función llamada. Con ese array
podermos usar &lt;a class="reference external" href="http://php.net/count"&gt;count&lt;/a&gt; para saber cuantos
argumentos se pasaron y decidir qué se debe hacer. Esto es más seguro
que especificar y evaluar valores por defecto (FALSE o NULL, por
ejemplo) porque algunos usuarios genuinamente podrían querer usar esos
valores (supongamos que NULL signifique eliminar el atributo en una
futura versión).&lt;/p&gt;
&lt;pre class="literal-block"&gt;include_spip("inc/filtres");

/**
 * The `attr` function allows the user to get and set the attributes of an HTML tag.
 * It is intended to be used as a SPIP filter and depends on existing SPIP functionality.
 *
 * @param $tag
 *     The HTML code.
 * @param $name
 *     The name of the attribute.
 * @param $val...
 *     The new value for the attribute $nom. Optional.
 * @return
 *     If $val was given, the code for tag with $name=$val
 *     Otherwise, the value for the $name attribute in $tag.
 */
function attr($tag, $name){
        $args = func_get_args();

        if (count($args) &amp;gt; 2) {
                // SET
                return  inserer_attribut($tag, $name, $args[2]);
        } else {
                // GET
                return extraire_attribut($tag, $name);
        }
}&lt;/pre&gt;
&lt;p&gt;Simplemente copia el código en mes_fonctions.php (Mira "Agregar
funciones propias" en la documentación sobre &lt;a class="reference external" href="https://mgaitan.github.io/posts/una-mejor-manera-de-controlar-los/Agregar%20funciones%20propias"&gt;filtros de
spip&lt;/a&gt;) y luego usa el filtro attr en
tus esqueletos:&lt;/p&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 94)&lt;/p&gt;
&lt;p&gt;Literal block expected; none found.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Hay algunos cambios que se puede hacer a esta función: pasar $args
directamente a inserer_attribut y extraire_attribut en vez de las
variables individuales, agregar un parámetro $value=FALSE que sólo sirva
para la claridad de la documentación , y el mencionado, eliminar
atributos cuando se pase por ejemplo NULL como parámetro.&lt;/p&gt;</description><category>jQuery</category><category>spip</category><guid>https://mgaitan.github.io/posts/una-mejor-manera-de-controlar-los/</guid><pubDate>Thu, 12 Mar 2009 08:29:35 GMT</pubDate></item><item><title>Mostrar u ocultar contenido, fácil</title><link>https://mgaitan.github.io/posts/mostrar-u-ocultar-contenido-facil/</link><dc:creator>Martín Gaitán</dc:creator><description>&lt;p&gt;Adrian León consultó en la lista
&lt;a class="reference external" href="http://listes.rezo.net/mailman/listinfo/spip-es"&gt;spip-es&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Estoy intentado poner balizas de este tipo:&lt;/p&gt;
&lt;p&gt;#BOUTON_BLOCK&lt;/p&gt;
&lt;p&gt;#DEBUT_BLOCK&lt;/p&gt;
&lt;p&gt;Desde el editor del sitio privado en el texto de un artículo. No
conozco la forma de que funcione desde ahí (sale escrito como texto
en la página resultante. ¿Hay alguna manera de hacerlo?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Estaba intentando, me enteré después, usar &lt;a class="reference external" href="http://www.spip-contrib.net/Block-deplier-replier"&gt;este
plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Al otro día yo contesté:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hola Adrián. Desconocía de qué hablabas hasta que Marina mandó el
link. Me parece que en el algunas ocasiones los plugins están
opacando las soluciones más eficientes e ingeniosas, esas que
buscabamos antes de que todo fuese "enchufable". &lt;strong&gt;¡Spip se está
wordpressisando!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lo que quiero decir es que me parece que hay formas mejores de hacer
eso. Yo tengo &lt;a class="reference external" href="http://www.lavozdelanzarote.com/Carlos-Espino-cree-que-los"&gt;un ejemplo para
darte&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andá al pie del artículo, y hacé click en Opinar: despliega (u
oculta, depende del estado) el formulario de comentarios.&lt;/p&gt;
&lt;p&gt;Es, sin balizas ni plugins, lo que parece que hace esa contrib.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Y el código es de risa: un pelín de jQuery (con su efecto
&lt;a class="reference external" href="http://docs.jquery.com/Effects/toggle"&gt;toggle()&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;El &lt;a class="reference external" href="http://www.lavozdelanzarote.com/squelettes/inc_article.html"&gt;esqueleto del ejemplo que
propongo&lt;/a&gt;
es bien sencillo. El formulario aparece encerrado en una &lt;code class="docutils literal"&gt;div&lt;/code&gt; y
escondido con la propiedad CSS &lt;code class="docutils literal"&gt;display:none&lt;/code&gt;. De manera simplificada
[&lt;a class="reference external" href="https://mgaitan.github.io/blog/article/mostrar-u-ocultar-contenido-facil#nb1"&gt;1&lt;/a&gt;] :&lt;/p&gt;
&lt;pre class="literal-block"&gt;[(#FORMULAIRE_FORUM)]&lt;/pre&gt;
&lt;p&gt;Y el link que produce el efecto mostrar/ocultar (en este caso «opinar»
)tiene este código.&lt;/p&gt;
&lt;pre class="literal-block"&gt;Opinar&lt;/pre&gt;
&lt;p&gt;En perfecto argentino se diría: ¡una papa!&lt;/p&gt;
&lt;p&gt;Breve explicación: Al hacer click sobre el link, se ejecuta el evento
Onclick, que mendiante jQuery (que ya se encuentra en todo sitio SPIP si
existe la baliza #INSERT_HEAD en el &lt;code class="docutils literal"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; de los esqueletos), se
busca la el bloque con ID «form-comment» (o sea, el &lt;code class="docutils literal"&gt;div&lt;/code&gt; contenedor
del formulario), y se aplica &lt;code class="docutils literal"&gt;toggle()&lt;/code&gt;, que es una funcion que si el
bloque está oculto, lo muestra, y se está visible lo oculta. Simple y
efectivo.&lt;/p&gt;
&lt;section id="permitiendo-el-uso-desde-la-redaccion"&gt;
&lt;h2&gt;Permitiendo el uso desde la redacción&lt;/h2&gt;
&lt;p&gt;Hasta aquí el reemplazo al plugin, que no da una solución completa a la
consulta de Adrían, porque esta solución también está programado en los
esqueletos del sitio. Pero, con simples modificaciones, se puede usar
dentro del texto de los artículos.&lt;/p&gt;
&lt;p&gt;El truco es este: la balizas no se pueden usar en el texto, pero &lt;strong&gt;los
modelos&lt;/strong&gt; sí. Y como spip respeta el HTML, tenemos solución: generamo el
link interruptor a través de &lt;a class="reference external" href="http://www.spip.net/es_article3609.html"&gt;un
modelo&lt;/a&gt;
[&lt;a class="reference external" href="https://mgaitan.github.io/blog/article/mostrar-u-ocultar-contenido-facil#nb2"&gt;2&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;Creamos un modelo dentro de &lt;em&gt;modeles/toggle.html&lt;/em&gt; (dentro de la carpeta
de nuestros esqueletos) con el siguiente código:&lt;/p&gt;
&lt;pre class="literal-block"&gt;#ENV{texto}&lt;/pre&gt;
&lt;p&gt;¡Y listo!&lt;/p&gt;
&lt;p&gt;Para usarlo, en el cuerpo del artículo se invocaría al modelo con dos
parámetros: el identificador del contenedor, y el texto de link
controlador.&lt;/p&gt;
&lt;p&gt;Donde se quiera mostrar el link escribimos:&lt;/p&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 95)&lt;/p&gt;
&lt;p&gt;Literal block expected; none found.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;y donde queramos que vaya el contenido oculto:&lt;/p&gt;
&lt;pre class="literal-block"&gt;Hola amigos, esto es una astucia para el compañero Adrian!
&amp;lt;/div&amp;gt;&lt;/pre&gt;
&lt;p&gt;Sólo hay que asegurarse de que el ID del contenedor sea el mismo que el
parametro &lt;em&gt;div&lt;/em&gt; que pasamos a nuestro modelo. Por supuesto, esto permite
tener múltiples bloques ocultos y link controladores.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="el-resultado"&gt;
&lt;h2&gt;El resultado&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://mgaitan.github.io/blog/article/mostrar-u-ocultar-contenido-facil#oculto"&gt;esto
funciona?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;¡Hola amigos, esto es una astucia para el compañero Adrian!&lt;/p&gt;
&lt;/section&gt;</description><category>jQuery</category><category>spip</category><guid>https://mgaitan.github.io/posts/mostrar-u-ocultar-contenido-facil/</guid><pubDate>Thu, 26 Feb 2009 08:12:34 GMT</pubDate></item></channel></rss>